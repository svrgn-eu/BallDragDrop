<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BallDragDrop</name>
    </assembly>
    <members>
        <member name="T:BallDragDrop.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="F:BallDragDrop.App._logService">
            <summary>
            Logging service for application-wide logging
            </summary>
        </member>
        <member name="F:BallDragDrop.App._mainWindow">
            <summary>
            Main window reference for the application
            </summary>
        </member>
        <member name="F:BallDragDrop.App._settingsManager">
            <summary>
            Settings manager for application configuration
            </summary>
        </member>
        <member name="F:BallDragDrop.App._configurationService">
            <summary>
            Configuration service for application configuration
            </summary>
        </member>
        <member name="M:BallDragDrop.App.Application_Startup(System.Object,System.Windows.StartupEventArgs)">
            <summary>
            Application startup event handler from XAML
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.App.ShowSplashScreenAndInitialize">
            <summary>
            Shows the splash screen and initializes the application
            </summary>
        </member>
        <member name="M:BallDragDrop.App.SplashScreen_InitializationComplete(System.Object,System.EventArgs)">
            <summary>
            Event handler for splash screen initialization complete
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.App.ShowMainWindow">
            <summary>
            Shows the main window
            </summary>
        </member>
        <member name="M:BallDragDrop.App.Application_Exit(System.Object,System.Windows.ExitEventArgs)">
            <summary>
            Application exit event handler from XAML
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.App.ProcessCommandLineArguments(System.String[])">
            <summary>
            Processes command line arguments
            </summary>
            <param name="args">Command line arguments</param>
        </member>
        <member name="M:BallDragDrop.App.CleanupResources">
            <summary>
            Cleans up application resources before exit
            </summary>
        </member>
        <member name="M:BallDragDrop.App.App_DispatcherUnhandledException(System.Object,System.Windows.Threading.DispatcherUnhandledExceptionEventArgs,BallDragDrop.Contracts.IExceptionHandlingService)">
            <summary>
            Handles unhandled exceptions in the UI thread
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
            <param name="exceptionHandlingService">Injected exception handling service</param>
        </member>
        <member name="M:BallDragDrop.App.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs,BallDragDrop.Contracts.IExceptionHandlingService)">
            <summary>
            Handles unhandled exceptions in non-UI threads
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
            <param name="exceptionHandlingService">Injected exception handling service</param>
        </member>
        <member name="M:BallDragDrop.App.TaskScheduler_UnobservedTaskException(System.Object,System.Threading.Tasks.UnobservedTaskExceptionEventArgs,BallDragDrop.Contracts.IExceptionHandlingService)">
            <summary>
            Handles unobserved task exceptions
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
            <param name="exceptionHandlingService">Injected exception handling service</param>
        </member>
        <member name="M:BallDragDrop.App.LogStartupInformation">
            <summary>
            Logs comprehensive startup information including version and configuration
            </summary>
        </member>
        <member name="M:BallDragDrop.App.LogShutdownInformation(System.Int32)">
            <summary>
            Logs comprehensive shutdown information
            </summary>
            <param name="exitCode">Application exit code</param>
        </member>
        <member name="M:BallDragDrop.App.FlushLogs">
            <summary>
            Flushes any pending log entries
            </summary>
        </member>
        <member name="M:BallDragDrop.App.InitializeSettings">
            <summary>
            Initializes application settings
            </summary>
        </member>
        <member name="M:BallDragDrop.App.SaveSettings">
            <summary>
            Saves application settings
            </summary>
        </member>
        <member name="M:BallDragDrop.App.GetSettingsManager">
            <summary>
            Gets the settings manager instance
            </summary>
            <returns>The settings manager instance</returns>
        </member>
        <member name="M:BallDragDrop.App.GetLogService">
            <summary>
            Gets the logging service instance
            </summary>
            <returns>The logging service instance</returns>
        </member>
        <member name="M:BallDragDrop.App.GetConfigurationService">
            <summary>
            Gets the configuration service instance
            </summary>
            <returns>The configuration service instance</returns>
        </member>
        <member name="M:BallDragDrop.App.InitializeDefaultBallImage">
            <summary>
            Initializes the default ball image from configuration
            </summary>
        </member>
        <member name="M:BallDragDrop.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:BallDragDrop.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:BallDragDrop.AssemblyInfo">
            <summary>
            Assembly-level attributes and configuration for the BallDragDrop application.
            Contains theme information and resource dictionary location settings.
            </summary>
        </member>
        <member name="M:BallDragDrop.AssemblyInfo.#cctor">
            <summary>
            Configures theme information for the application assembly.
            Specifies where theme-specific and generic resource dictionaries are located.
            </summary>
        </member>
        <member name="T:BallDragDrop.Bootstrapper.ServiceBootstrapper">
            <summary>
            Central static bootstrapper class for dependency injection configuration
            </summary>
        </member>
        <member name="F:BallDragDrop.Bootstrapper.ServiceBootstrapper._serviceProvider">
            <summary>
            The configured service provider instance
            </summary>
        </member>
        <member name="F:BallDragDrop.Bootstrapper.ServiceBootstrapper._lock">
            <summary>
            Lock object for thread-safe initialization
            </summary>
        </member>
        <member name="P:BallDragDrop.Bootstrapper.ServiceBootstrapper.ServiceProvider">
            <summary>
            Gets the configured service provider
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the service provider has not been initialized</exception>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.Initialize">
            <summary>
            Initializes the service container with all application services
            </summary>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures all application services in the dependency injection container
            </summary>
            <param name="services">The service collection to configure</param>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.RegisterCoreServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers core application services
            </summary>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.RegisterLoggingServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers logging-related services
            </summary>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.InitializeLog4NetConfiguration">
            <summary>
            Initializes Log4NET configuration
            </summary>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.RegisterViewModels(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers ViewModels for dependency injection
            </summary>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.RegisterStateMachineServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers state machine services for dependency injection
            </summary>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.RegisterApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers other application-specific services
            </summary>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.GetService``1">
            <summary>
            Gets a service of the specified type
            </summary>
            <typeparam name="T">The type of service to retrieve</typeparam>
            <returns>The service instance</returns>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.GetOptionalService``1">
            <summary>
            Gets a service of the specified type, or null if not found
            </summary>
            <typeparam name="T">The type of service to retrieve</typeparam>
            <returns>The service instance or null</returns>
        </member>
        <member name="M:BallDragDrop.Bootstrapper.ServiceBootstrapper.Dispose">
            <summary>
            Disposes the service provider and cleans up resources
            </summary>
        </member>
        <member name="T:BallDragDrop.Commands.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates.
            </summary>
        </member>
        <member name="M:BallDragDrop.Commands.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="E:BallDragDrop.Commands.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:BallDragDrop.Commands.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:BallDragDrop.Commands.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="T:BallDragDrop.Commands.RelayCommand`1">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
        </member>
        <member name="M:BallDragDrop.Commands.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="E:BallDragDrop.Commands.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:BallDragDrop.Commands.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:BallDragDrop.Commands.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="T:BallDragDrop.Constants">
            <summary>
            Centralized constants for the BallDragDrop application
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.UI_CHROME_HEIGHT_OFFSET">
            <summary>
            Height offset to account for menu bar, status bar, borders, and other UI chrome
            This value ensures the canvas doesn't overlap with the status bar
            Adjust this value if the layout changes or on different DPI settings
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.MOUSE_HISTORY_SIZE">
            <summary>
            Size of the mouse position history buffer for velocity calculation
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.DEFAULT_BALL_SIZE">
            <summary>
            Default ball size when configuration is not available
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.MAX_ASSET_NAME_LENGTH">
            <summary>
            Maximum length for asset names displayed in the status bar
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.DEFAULT_FRICTION_COEFFICIENT">
            <summary>
            Default friction coefficient for ball movement
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.DEFAULT_GRAVITY">
            <summary>
            Default gravity acceleration
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.DEFAULT_BOUNCE_FACTOR">
            <summary>
            Default bounce factor for collisions
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.VELOCITY_THRESHOLD">
            <summary>
            Velocity threshold below which the ball is considered stopped
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.DEFAULT_BALL_IMAGE_PATH">
            <summary>
            Default path to the ball image resource
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.CONFIG_FILE_NAME">
            <summary>
            Configuration file name
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.MAX_ACCEPTABLE_FRAME_TIME_MS">
            <summary>
            Maximum acceptable frame time in milliseconds (~60 FPS)
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.MAX_ACCEPTABLE_PHYSICS_UPDATE_TIME_MS">
            <summary>
            Maximum acceptable physics update time in milliseconds
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.MAX_ACCEPTABLE_LOGGING_OVERHEAD_MS">
            <summary>
            Maximum acceptable logging overhead in milliseconds per operation
            </summary>
        </member>
        <member name="F:BallDragDrop.Constants.MAX_ACCEPTABLE_MEMORY_OVERHEAD_MB">
            <summary>
            Maximum acceptable memory overhead in megabytes
            </summary>
        </member>
        <member name="T:BallDragDrop.Contracts.IBallStateMachine">
            <summary>
            Defines the contract for a ball state machine that manages state transitions
            and provides notifications to observers about state changes.
            </summary>
        </member>
        <member name="P:BallDragDrop.Contracts.IBallStateMachine.CurrentState">
            <summary>
            Gets the current state of the ball.
            </summary>
            <value>The current ball state.</value>
        </member>
        <member name="E:BallDragDrop.Contracts.IBallStateMachine.StateChanged">
            <summary>
            Occurs when the ball state changes.
            This event is raised whenever a state transition occurs, providing
            information about the previous state, new state, and trigger.
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IBallStateMachine.Fire(BallDragDrop.Models.BallTrigger)">
            <summary>
            Fires the specified trigger to attempt a state transition.
            If the trigger is valid for the current state, the state machine
            will transition to the appropriate new state and notify observers.
            </summary>
            <param name="trigger">The trigger to fire.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the trigger is not valid for the current state.
            </exception>
        </member>
        <member name="M:BallDragDrop.Contracts.IBallStateMachine.CanFire(BallDragDrop.Models.BallTrigger)">
            <summary>
            Determines whether the specified trigger can be fired in the current state.
            This method allows checking if a state transition is valid before attempting it.
            </summary>
            <param name="trigger">The trigger to check.</param>
            <returns>
            <c>true</c> if the trigger can be fired in the current state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BallDragDrop.Contracts.IBallStateMachine.Subscribe(BallDragDrop.Contracts.IBallStateObserver)">
            <summary>
            Subscribes an observer to receive state change notifications.
            The observer will be notified whenever the ball state changes.
            </summary>
            <param name="observer">The observer to subscribe.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="observer"/> is null.
            </exception>
        </member>
        <member name="M:BallDragDrop.Contracts.IBallStateMachine.Unsubscribe(BallDragDrop.Contracts.IBallStateObserver)">
            <summary>
            Unsubscribes an observer from state change notifications.
            The observer will no longer receive state change notifications.
            </summary>
            <param name="observer">The observer to unsubscribe.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="observer"/> is null.
            </exception>
        </member>
        <member name="T:BallDragDrop.Contracts.IBallStateObserver">
            <summary>
            Defines the contract for observers that need to be notified of ball state changes.
            This interface implements the Observer pattern, allowing components to react
            to state transitions in the ball state machine.
            </summary>
            <remarks>
            Components that implement this interface can register with the ball state machine
            to receive notifications whenever the ball transitions between states.
            This enables loose coupling between the state machine and components that need
            to react to state changes, such as the UI, physics engine, or other services.
            
            The observer pattern is particularly useful in this context because:
            - Multiple components can react to the same state change
            - Components can be added or removed without modifying the state machine
            - State-dependent behavior is centralized in the observing components
            - The state machine remains focused on state management logic
            </remarks>
        </member>
        <member name="M:BallDragDrop.Contracts.IBallStateObserver.OnStateChanged(BallDragDrop.Models.BallState,BallDragDrop.Models.BallState,BallDragDrop.Models.BallTrigger)">
            <summary>
            Called when the ball state changes.
            This method is invoked by the state machine whenever a state transition occurs,
            providing the observer with information about the transition.
            </summary>
            <param name="previousState">The state the ball was in before the transition.</param>
            <param name="newState">The state the ball transitioned to.</param>
            <param name="trigger">The trigger that caused the state transition.</param>
            <remarks>
            Implementations of this method should:
            - Execute quickly to avoid blocking other observers
            - Handle exceptions gracefully to prevent disrupting the state machine
            - Update their internal state or UI based on the new ball state
            - Avoid triggering additional state transitions from within this method
            
            Common use cases for state change handling include:
            - Updating visual representations of the ball
            - Enabling or disabling physics calculations
            - Updating status displays or logging
            - Triggering animations or sound effects
            </remarks>
        </member>
        <member name="T:BallDragDrop.Contracts.IConfigurationService">
            <summary>
            Interface for application configuration management using Config.Net
            </summary>
        </member>
        <member name="P:BallDragDrop.Contracts.IConfigurationService.Configuration">
            <summary>
            Gets the application configuration
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IConfigurationService.Initialize">
            <summary>
            Initializes the configuration service
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IConfigurationService.GetDefaultBallImagePath">
            <summary>
            Gets the default ball image path from configuration
            </summary>
            <returns>The default ball image path</returns>
        </member>
        <member name="M:BallDragDrop.Contracts.IConfigurationService.SetDefaultBallImagePath(System.String)">
            <summary>
            Sets the default ball image path in configuration
            </summary>
            <param name="path">The path to set as default</param>
        </member>
        <member name="M:BallDragDrop.Contracts.IConfigurationService.ValidateImagePath(System.String)">
            <summary>
            Validates if the specified image path exists and is accessible
            </summary>
            <param name="path">The image path to validate</param>
            <returns>True if the path is valid, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Contracts.IConfigurationService.GetShowBoundingBox">
            <summary>
            Gets whether to show the ball's bounding box for debugging
            </summary>
            <returns>True if bounding box should be shown, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Contracts.IConfigurationService.SetShowBoundingBox(System.Boolean)">
            <summary>
            Sets whether to show the ball's bounding box for debugging
            </summary>
            <param name="show">True to show bounding box, false to hide</param>
        </member>
        <member name="T:BallDragDrop.Contracts.IAppConfiguration">
            <summary>
            Application configuration interface using Config.Net
            </summary>
        </member>
        <member name="P:BallDragDrop.Contracts.IAppConfiguration.DefaultBallImagePath">
            <summary>
            Gets or sets the default ball image path
            </summary>
        </member>
        <member name="P:BallDragDrop.Contracts.IAppConfiguration.EnableAnimations">
            <summary>
            Gets or sets whether animations are enabled
            </summary>
        </member>
        <member name="P:BallDragDrop.Contracts.IAppConfiguration.DefaultBallSize">
            <summary>
            Gets or sets the default ball size
            </summary>
        </member>
        <member name="P:BallDragDrop.Contracts.IAppConfiguration.ShowBoundingBox">
            <summary>
            Gets or sets whether to show the ball's bounding box for debugging
            </summary>
        </member>
        <member name="T:BallDragDrop.Contracts.IExceptionHandlingService">
            <summary>
            Interface for enhanced exception handling service
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IExceptionHandlingService.HandleException(System.Exception,System.String)">
            <summary>
            Handles unhandled exceptions with context capture
            </summary>
            <param name="exception">The exception to handle</param>
            <param name="context">Additional context information</param>
        </member>
        <member name="M:BallDragDrop.Contracts.IExceptionHandlingService.CaptureApplicationContext">
            <summary>
            Captures current application state for error reporting
            </summary>
            <returns>Application context information</returns>
        </member>
        <member name="M:BallDragDrop.Contracts.IExceptionHandlingService.GenerateUserFriendlyMessage(System.Exception)">
            <summary>
            Generates user-friendly error message from exception
            </summary>
            <param name="exception">The exception to process</param>
            <returns>User-friendly error message</returns>
        </member>
        <member name="M:BallDragDrop.Contracts.IExceptionHandlingService.AttemptRecovery(System.Exception)">
            <summary>
            Attempts to recover from an error condition
            </summary>
            <param name="exception">The exception that occurred</param>
            <returns>True if recovery was successful</returns>
        </member>
        <member name="M:BallDragDrop.Contracts.IExceptionHandlingService.ReportCriticalError(System.Exception,System.Object)">
            <summary>
            Reports critical errors that require immediate attention
            </summary>
            <param name="exception">The critical exception</param>
            <param name="applicationState">Current application state</param>
        </member>
        <member name="T:BallDragDrop.Contracts.ILogService">
            <summary>
            Interface for logging services
            </summary>
        </member>
        <member name="T:BallDragDrop.Contracts.LogLevel">
            <summary>
            Log levels enumeration
            </summary>
        </member>
        <member name="F:BallDragDrop.Contracts.LogLevel.Trace">
            <summary>
            Trace level logging
            </summary>
        </member>
        <member name="F:BallDragDrop.Contracts.LogLevel.Debug">
            <summary>
            Debug level logging
            </summary>
        </member>
        <member name="F:BallDragDrop.Contracts.LogLevel.Information">
            <summary>
            Information level logging
            </summary>
        </member>
        <member name="F:BallDragDrop.Contracts.LogLevel.Warning">
            <summary>
            Warning level logging
            </summary>
        </member>
        <member name="F:BallDragDrop.Contracts.LogLevel.Error">
            <summary>
            Error level logging
            </summary>
        </member>
        <member name="F:BallDragDrop.Contracts.LogLevel.Critical">
            <summary>
            Critical level logging
            </summary>
        </member>
        <member name="T:BallDragDrop.Contracts.IMethodLoggingInterceptor">
            <summary>
            Interface for method logging interception
            This will be implemented in task 4
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IMethodLoggingInterceptor.ConfigureMethodFilter(System.String,System.Boolean)">
            <summary>
            Configures method filtering for interception
            </summary>
            <param name="methodName">Method name to filter</param>
            <param name="shouldIntercept">Whether to intercept this method</param>
        </member>
        <member name="M:BallDragDrop.Contracts.IMethodLoggingInterceptor.SetParameterLogging(System.Boolean)">
            <summary>
            Enables or disables parameter logging
            </summary>
            <param name="enabled">Whether parameter logging is enabled</param>
        </member>
        <member name="T:BallDragDrop.Contracts.IPerformanceMonitor">
            <summary>
            Interface for performance monitoring of logging operations
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IPerformanceMonitor.RecordLoggingOperation(System.String,System.TimeSpan)">
            <summary>
            Records the execution time of a logging operation
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IPerformanceMonitor.RecordMemoryUsage(System.Int64,System.Int64)">
            <summary>
            Records memory usage for logging operations
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IPerformanceMonitor.RecordLogEntriesProcessed(System.Int32)">
            <summary>
            Records the number of log entries processed
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IPerformanceMonitor.RecordBatchProcessing(System.Int32,System.TimeSpan)">
            <summary>
            Records batch processing metrics
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IPerformanceMonitor.GetStatistics">
            <summary>
            Gets current performance statistics
            </summary>
        </member>
        <member name="M:BallDragDrop.Contracts.IPerformanceMonitor.Reset">
            <summary>
            Resets all performance counters
            </summary>
        </member>
        <member name="T:BallDragDrop.Contracts.PerformanceStatistics">
            <summary>
            Performance statistics for logging operations
            </summary>
        </member>
        <member name="T:BallDragDrop.Contracts.OperationStatistics">
            <summary>
            Statistics for specific operation types
            </summary>
        </member>
        <member name="T:BallDragDrop.Converters.ColorToBrushConverter">
            <summary>
            Converter to convert Color to SolidColorBrush for XAML binding
            </summary>
        </member>
        <member name="F:BallDragDrop.Converters.ColorToBrushConverter.Instance">
            <summary>
            Singleton instance of the ColorToBrushConverter
            </summary>
        </member>
        <member name="M:BallDragDrop.Converters.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a Color to a SolidColorBrush
            </summary>
            <param name="value">The Color value to convert</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter (not used)</param>
            <param name="culture">The culture info</param>
            <returns>A SolidColorBrush with the specified color</returns>
        </member>
        <member name="M:BallDragDrop.Converters.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back (not implemented)
            </summary>
            <param name="value">The value to convert back</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture info</param>
            <returns>Not implemented</returns>
            <exception cref="T:System.NotImplementedException">This method is not implemented</exception>
        </member>
        <member name="T:BallDragDrop.Converters.ColorToColorConverter">
            <summary>
            Converter to convert Color to Color for XAML binding (identity converter)
            </summary>
        </member>
        <member name="F:BallDragDrop.Converters.ColorToColorConverter.Instance">
            <summary>
            Singleton instance of the ColorToColorConverter
            </summary>
        </member>
        <member name="M:BallDragDrop.Converters.ColorToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a Color to a Color (identity conversion)
            </summary>
            <param name="value">The Color value to convert</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter (not used)</param>
            <param name="culture">The culture info</param>
            <returns>The same Color value</returns>
        </member>
        <member name="M:BallDragDrop.Converters.ColorToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back (not implemented)
            </summary>
            <param name="value">The value to convert back</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture info</param>
            <returns>Not implemented</returns>
            <exception cref="T:System.NotImplementedException">This method is not implemented</exception>
        </member>
        <member name="T:BallDragDrop.Converters.OffsetConverter">
            <summary>
            Simple converter to offset a value by a specified amount
            </summary>
        </member>
        <member name="F:BallDragDrop.Converters.OffsetConverter.Instance">
            <summary>
            Singleton instance of the OffsetConverter
            </summary>
        </member>
        <member name="M:BallDragDrop.Converters.OffsetConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value by adding the specified offset
            </summary>
            <param name="value">The value to convert</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The offset amount as a string</param>
            <param name="culture">The culture info</param>
            <returns>The value plus the offset, or the original value if conversion fails</returns>
        </member>
        <member name="M:BallDragDrop.Converters.OffsetConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts back (not implemented)
            </summary>
            <param name="value">The value to convert back</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture info</param>
            <returns>Not implemented</returns>
            <exception cref="T:System.NotImplementedException">This method is not implemented</exception>
        </member>
        <member name="T:BallDragDrop.Models.AnimationFrame">
            <summary>
            Represents a single frame in an animation with memory management capabilities
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationFrame.Image">
            <summary>
            Gets or sets the image for this frame
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationFrame.Duration">
            <summary>
            Gets or sets the duration this frame should be displayed
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationFrame.SourceRect">
            <summary>
            Gets or sets the source rectangle for sprite sheet frames
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationFrame.IsCached">
            <summary>
            Gets a value indicating whether this frame is cached in memory
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationFrame.EstimatedMemoryUsage">
            <summary>
            Gets the estimated memory usage of this frame in bytes
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationFrame.#ctor">
            <summary>
            Initializes a new instance of the AnimationFrame class
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationFrame.#ctor(System.Windows.Media.ImageSource,System.TimeSpan)">
            <summary>
            Initializes a new instance of the AnimationFrame class
            </summary>
            <param name="image">The image for this frame</param>
            <param name="duration">The duration this frame should be displayed</param>
        </member>
        <member name="M:BallDragDrop.Models.AnimationFrame.#ctor(System.Windows.Media.ImageSource,System.TimeSpan,System.Windows.Rect)">
            <summary>
            Initializes a new instance of the AnimationFrame class
            </summary>
            <param name="image">The image for this frame</param>
            <param name="duration">The duration this frame should be displayed</param>
            <param name="sourceRect">The source rectangle for sprite sheet frames</param>
        </member>
        <member name="M:BallDragDrop.Models.AnimationFrame.OptimizeForMemory">
            <summary>
            Optimizes the frame for memory usage by freezing the image source
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationFrame.Dispose">
            <summary>
            Disposes of the frame resources
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationFrame.Dispose(System.Boolean)">
            <summary>
            Disposes of the frame resources
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:BallDragDrop.Models.AnimationEngine">
            <summary>
            Engine for managing animation playback and timing with memory management
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.Frames">
            <summary>
            Gets the list of animation frames
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.CurrentFrameIndex">
            <summary>
            Gets the current frame index
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.IsPlaying">
            <summary>
            Gets a value indicating whether the animation is currently playing
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.IsLooping">
            <summary>
            Gets or sets a value indicating whether the animation should loop
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.LoopCount">
            <summary>
            Gets or sets the number of times the animation should loop (0 = infinite, -1 = no looping)
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.CurrentLoop">
            <summary>
            Gets the current loop iteration (starts at 0)
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.FrameCount">
            <summary>
            Gets the total number of frames in the animation
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.CurrentMemoryUsage">
            <summary>
            Gets the current memory usage of cached frames in bytes
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.MaxMemoryUsage">
            <summary>
            Gets the maximum allowed memory usage for frame caching in bytes
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.CachedFrameCount">
            <summary>
            Gets the number of frames currently cached in memory
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationEngine.CacheHitRatio">
            <summary>
            Gets the cache hit ratio as a percentage (0-100)
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.#ctor(BallDragDrop.Contracts.ILogService,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the AnimationEngine class
            </summary>
            <param name="logService">Optional logging service</param>
            <param name="maxCacheSize">Maximum number of frames to cache (default: 50)</param>
            <param name="maxMemoryUsageMB">Maximum memory usage for frame caching in MB (default: 100)</param>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.LoadFrames(System.Collections.Generic.List{BallDragDrop.Models.AnimationFrame})">
            <summary>
            Loads frames into the animation engine with memory management
            </summary>
            <param name="frames">The list of animation frames</param>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.Play">
            <summary>
            Starts animation playback
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.Pause">
            <summary>
            Pauses animation playback
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.Stop">
            <summary>
            Stops animation playback and resets to the first frame
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.NextFrame">
            <summary>
            Advances to the next frame
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.GetCurrentFrame">
            <summary>
            Gets the current animation frame with caching support
            </summary>
            <returns>The current animation frame, or null if no frames are loaded</returns>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.SetCurrentFrame(System.Int32)">
            <summary>
            Sets the current frame index for animation playback
            </summary>
            <param name="frameIndex">The frame index to set (will be clamped to valid range)</param>
            <returns>True if the frame index was set successfully, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.Update(System.TimeSpan)">
            <summary>
            Updates the animation based on elapsed time
            </summary>
            <param name="deltaTime">Time elapsed since last update</param>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.Update">
            <summary>
            Updates the animation based on current time
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.PreloadFrames(System.Int32,System.Int32)">
            <summary>
            Pre-loads animation frames into cache to prevent stuttering
            </summary>
            <param name="startIndex">Starting frame index for pre-loading</param>
            <param name="count">Number of frames to pre-load</param>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.ClearCache">
            <summary>
            Clears the frame cache and releases memory
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.OptimizeMemoryUsage">
            <summary>
            Optimizes memory usage by removing least recently used frames from cache
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.GetMemoryStats">
            <summary>
            Gets memory usage statistics for monitoring
            </summary>
            <returns>Dictionary containing memory usage statistics</returns>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.Dispose">
            <summary>
            Disposes of the animation engine and releases all resources
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.CacheFrame(System.Int32)">
            <summary>
            Caches a frame at the specified index
            </summary>
            <param name="frameIndex">Index of the frame to cache</param>
            <returns>True if the frame was cached successfully</returns>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.UpdateCacheAccess(System.Int32)">
            <summary>
            Updates the cache access order for a frame
            </summary>
            <param name="frameIndex">Index of the accessed frame</param>
        </member>
        <member name="M:BallDragDrop.Models.AnimationEngine.Dispose(System.Boolean)">
            <summary>
            Disposes of the animation engine resources
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:BallDragDrop.Models.AnimationTimingMetrics">
            <summary>
            Metrics for animation timing performance in the dual timer system
            Used to monitor animation frame rate coordination with physics updates
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.IsAnimated">
            <summary>
            Gets or sets whether the ball visual is currently animated
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.AnimationTimerEnabled">
            <summary>
            Gets or sets whether the animation timer is currently enabled
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.AnimationTimerInterval">
            <summary>
            Gets or sets the current animation timer interval
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.SourceFrameDuration">
            <summary>
            Gets or sets the source frame duration from the original animation
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.LastAnimationUpdate">
            <summary>
            Gets or sets the timestamp of the last animation frame update
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.IsDragging">
            <summary>
            Gets or sets whether the ball is currently being dragged
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.ContentType">
            <summary>
            Gets or sets the type of visual content currently loaded
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.EffectiveAnimationFPS">
            <summary>
            Gets the effective animation FPS based on current timer interval
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.SourceAnimationFPS">
            <summary>
            Gets the source animation FPS based on original frame duration
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.IsRespectingSourceFrameRate">
            <summary>
            Gets whether the animation timing is respecting the source frame rate
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.IsOptimizedForDrag">
            <summary>
            Gets whether the animation timing is optimized for drag operations
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.TimeSinceLastUpdate">
            <summary>
            Gets the time since the last animation update
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AnimationTimingMetrics.IsPerformanceAcceptable">
            <summary>
            Gets whether the animation timing is within acceptable performance bounds
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AnimationTimingMetrics.ToString">
            <summary>
            Returns a string representation of the animation timing metrics
            </summary>
            <returns>Formatted animation timing metrics string</returns>
        </member>
        <member name="T:BallDragDrop.Models.AsepriteMetadata">
            <summary>
            Represents metadata for an Aseprite export
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteMetadata.App">
            <summary>
            Gets or sets the application name
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteMetadata.Version">
            <summary>
            Gets or sets the version
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteMetadata.Image">
            <summary>
            Gets or sets the image filename
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteMetadata.Format">
            <summary>
            Gets or sets the format
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteMetadata.Size">
            <summary>
            Gets or sets the size information
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteMetadata.Scale">
            <summary>
            Gets or sets the scale
            </summary>
        </member>
        <member name="T:BallDragDrop.Models.AsepriteSize">
            <summary>
            Represents size information for Aseprite export
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteSize.W">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteSize.H">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="T:BallDragDrop.Models.AsepriteFrame">
            <summary>
            Represents a frame in an Aseprite export
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteFrame.Frame">
            <summary>
            Gets or sets the frame rectangle
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteFrame.Rotated">
            <summary>
            Gets or sets whether the frame is rotated
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteFrame.Trimmed">
            <summary>
            Gets or sets whether the frame is trimmed
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteFrame.SpriteSourceSize">
            <summary>
            Gets or sets the sprite source size
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteFrame.SourceSize">
            <summary>
            Gets or sets the source size
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteFrame.Duration">
            <summary>
            Gets or sets the frame duration in milliseconds
            </summary>
        </member>
        <member name="T:BallDragDrop.Models.AsepriteRect">
            <summary>
            Represents a rectangle in Aseprite format
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteRect.X">
            <summary>
            Gets or sets the X coordinate
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteRect.Y">
            <summary>
            Gets or sets the Y coordinate
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteRect.W">
            <summary>
            Gets or sets the width
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteRect.H">
            <summary>
            Gets or sets the height
            </summary>
        </member>
        <member name="T:BallDragDrop.Models.AsepriteTag">
            <summary>
            Represents an animation tag in Aseprite export
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteTag.Name">
            <summary>
            Gets or sets the tag name
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteTag.From">
            <summary>
            Gets or sets the starting frame index
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteTag.To">
            <summary>
            Gets or sets the ending frame index
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteTag.Direction">
            <summary>
            Gets or sets the animation direction
            </summary>
        </member>
        <member name="T:BallDragDrop.Models.AsepriteData">
            <summary>
            Represents the complete Aseprite export data
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteData.Frames">
            <summary>
            Gets or sets the frames dictionary
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteData.Meta">
            <summary>
            Gets or sets the metadata
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteData.FrameTags">
            <summary>
            Gets or sets the animation tags
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AsepriteData.#ctor">
            <summary>
            Initializes a new instance of the AsepriteData class
            </summary>
        </member>
        <member name="T:BallDragDrop.Models.AsepriteValidationResult">
            <summary>
            Represents the result of Aseprite data validation
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteValidationResult.IsValid">
            <summary>
            Gets or sets a value indicating whether the validation passed
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.AsepriteValidationResult.ErrorMessage">
            <summary>
            Gets or sets the error message if validation failed
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AsepriteValidationResult.Success">
            <summary>
            Creates a successful validation result
            </summary>
            <returns>A validation result indicating success</returns>
        </member>
        <member name="M:BallDragDrop.Models.AsepriteValidationResult.Failure(System.String)">
            <summary>
            Creates a failed validation result with an error message
            </summary>
            <param name="errorMessage">The error message</param>
            <returns>A validation result indicating failure</returns>
        </member>
        <member name="T:BallDragDrop.Models.AsepriteLoader">
            <summary>
            Loader for Aseprite PNG+JSON exports
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.AsepriteLoader.#ctor(BallDragDrop.Contracts.ILogService)">
            <summary>
            Initializes a new instance of the AsepriteLoader class
            </summary>
            <param name="logService">Optional logging service</param>
        </member>
        <member name="M:BallDragDrop.Models.AsepriteLoader.LoadAsepriteAsync(System.String,System.String)">
            <summary>
            Loads Aseprite data from PNG and JSON files
            </summary>
            <param name="pngPath">Path to the PNG sprite sheet</param>
            <param name="jsonPath">Path to the JSON metadata file</param>
            <returns>The loaded Aseprite data, or null if loading failed</returns>
        </member>
        <member name="M:BallDragDrop.Models.AsepriteLoader.ConvertToAnimationFrames(BallDragDrop.Models.AsepriteData,System.Windows.Media.ImageSource)">
            <summary>
            Converts Aseprite data to animation frames
            </summary>
            <param name="data">The Aseprite data</param>
            <param name="spriteSheet">The loaded sprite sheet image</param>
            <returns>List of animation frames</returns>
        </member>
        <member name="M:BallDragDrop.Models.AsepriteLoader.ExtractFrame(System.Windows.Media.ImageSource,System.Windows.Rect)">
            <summary>
            Extracts a frame from a sprite sheet
            </summary>
            <param name="spriteSheet">The sprite sheet image</param>
            <param name="sourceRect">The source rectangle to extract</param>
            <returns>The extracted frame image</returns>
        </member>
        <member name="M:BallDragDrop.Models.AsepriteLoader.ValidateAsepriteData(BallDragDrop.Models.AsepriteData,System.String)">
            <summary>
            Validates the loaded Aseprite data for structural integrity
            </summary>
            <param name="data">The Aseprite data to validate</param>
            <param name="jsonPath">The path to the JSON file for error reporting</param>
            <returns>Validation result indicating success or failure with error message</returns>
        </member>
        <member name="T:BallDragDrop.Models.BallModel">
            <summary>
            Represents the data model for a ball in the application.
            Contains properties for position, velocity, size, and other physical attributes.
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallModel.X">
            <summary>
            Gets or sets the X position of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallModel.Y">
            <summary>
            Gets or sets the Y position of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallModel.VelocityX">
            <summary>
            Gets or sets the X velocity of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallModel.VelocityY">
            <summary>
            Gets or sets the Y velocity of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallModel.Radius">
            <summary>
            Gets or sets the radius of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallModel.Mass">
            <summary>
            Gets or sets the mass of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallModel.IsMoving">
            <summary>
            Gets a value indicating whether the ball is currently moving
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.#ctor">
            <summary>
            Initializes a new instance of the BallModel class with default values.
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the BallModel class with specified position.
            </summary>
            <param name="x">Initial X position</param>
            <param name="y">Initial Y position</param>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the BallModel class with specified position and radius.
            </summary>
            <param name="x">Initial X position</param>
            <param name="y">Initial Y position</param>
            <param name="radius">Ball radius</param>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.UpdatePosition(System.Double)">
            <summary>
            Updates the ball's position based on its current velocity.
            </summary>
            <param name="timeStep">Time step for the update (in seconds)</param>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.ApplyForce(System.Double,System.Double,System.Double)">
            <summary>
            Applies a force to the ball, changing its velocity.
            </summary>
            <param name="forceX">Force in X direction</param>
            <param name="forceY">Force in Y direction</param>
            <param name="timeStep">Time step for the force application (in seconds)</param>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.SetVelocity(System.Double,System.Double)">
            <summary>
            Sets the ball's velocity directly.
            </summary>
            <param name="velocityX">New X velocity</param>
            <param name="velocityY">New Y velocity</param>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.Stop">
            <summary>
            Stops the ball's movement by setting its velocity to zero.
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.ContainsPoint(System.Double,System.Double)">
            <summary>
            Checks if a point is inside the ball.
            </summary>
            <param name="pointX">X coordinate of the point</param>
            <param name="pointY">Y coordinate of the point</param>
            <returns>True if the point is inside the ball, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.GetPosition">
            <summary>
            Gets the current position as a Point.
            </summary>
            <returns>A Point representing the ball's position</returns>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.SetPosition(System.Double,System.Double)">
            <summary>
            Sets the ball's position.
            </summary>
            <param name="x">New X position</param>
            <param name="y">New Y position</param>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.SetPosition(System.Windows.Point)">
            <summary>
            Sets the ball's position from a Point.
            </summary>
            <param name="position">New position</param>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.ConstrainPosition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constrains the ball's position to be within the specified boundaries.
            </summary>
            <param name="minX">Minimum X coordinate</param>
            <param name="minY">Minimum Y coordinate</param>
            <param name="maxX">Maximum X coordinate</param>
            <param name="maxY">Maximum Y coordinate</param>
            <returns>True if the position was constrained, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.BallModel.ValidateDouble(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Validates a double value to ensure it's not NaN or Infinity
            </summary>
            <param name="value">The value to validate</param>
            <param name="fallback">The fallback value to use if validation fails</param>
            <param name="minimum">Optional minimum value constraint</param>
            <returns>The validated value or fallback if invalid</returns>
        </member>
        <member name="T:BallDragDrop.Models.BallState">
            <summary>
            Represents the various states that a ball can be in during its lifecycle.
            The state machine manages transitions between these states to ensure predictable ball behavior.
            </summary>
        </member>
        <member name="F:BallDragDrop.Models.BallState.Idle">
            <summary>
            The ball is at rest and not being interacted with.
            In this state, the ball is stationary and waiting for user input.
            Physics calculations are minimal, and the ball displays its default visual appearance.
            </summary>
        </member>
        <member name="F:BallDragDrop.Models.BallState.Held">
            <summary>
            The ball is being held by the user (clicked and dragged).
            In this state, the ball follows the mouse cursor and physics calculations are paused.
            Visual feedback indicates the ball is being actively manipulated.
            </summary>
        </member>
        <member name="F:BallDragDrop.Models.BallState.Thrown">
            <summary>
            The ball has been released and is in motion under physics control.
            In this state, physics calculations are active, controlling the ball's movement.
            The ball will remain in this state until its velocity drops below the threshold.
            </summary>
        </member>
        <member name="T:BallDragDrop.Models.BallStateChangedEventArgs">
            <summary>
            Event arguments for ball state change notifications.
            Provides information about the state transition including the previous state,
            new state, trigger that caused the change, and timestamp of the transition.
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallStateChangedEventArgs.PreviousState">
            <summary>
            Gets the state the ball was in before the transition.
            </summary>
            <value>The previous ball state.</value>
        </member>
        <member name="P:BallDragDrop.Models.BallStateChangedEventArgs.NewState">
            <summary>
            Gets the state the ball transitioned to.
            </summary>
            <value>The new ball state.</value>
        </member>
        <member name="P:BallDragDrop.Models.BallStateChangedEventArgs.Trigger">
            <summary>
            Gets the trigger that caused the state transition.
            </summary>
            <value>The trigger that initiated the state change.</value>
        </member>
        <member name="P:BallDragDrop.Models.BallStateChangedEventArgs.Timestamp">
            <summary>
            Gets the timestamp when the state transition occurred.
            </summary>
            <value>The date and time of the state transition.</value>
        </member>
        <member name="M:BallDragDrop.Models.BallStateChangedEventArgs.#ctor(BallDragDrop.Models.BallState,BallDragDrop.Models.BallState,BallDragDrop.Models.BallTrigger)">
            <summary>
            Initializes a new instance of the <see cref="T:BallDragDrop.Models.BallStateChangedEventArgs"/> class.
            </summary>
            <param name="previousState">The state the ball was in before the transition.</param>
            <param name="newState">The state the ball transitioned to.</param>
            <param name="trigger">The trigger that caused the state transition.</param>
        </member>
        <member name="T:BallDragDrop.Models.BallStateConfiguration">
            <summary>
            Configuration settings for the ball state machine behavior.
            This class provides configurable parameters that control how the state machine
            operates, including thresholds, timing, and feature toggles.
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.BallStateConfiguration.VelocityThreshold">
            <summary>
            Gets or sets the velocity threshold below which the ball transitions from Thrown to Idle state.
            When the ball's velocity magnitude drops below this value, it will automatically
            transition back to the Idle state.
            </summary>
            <value>The velocity threshold in pixels per second. Default is 50.0.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the value is negative or zero.
            </exception>
        </member>
        <member name="P:BallDragDrop.Models.BallStateConfiguration.StateTransitionDelay">
            <summary>
            Gets or sets the minimum delay between state transitions.
            This prevents rapid state transitions that could cause instability
            or poor user experience.
            </summary>
            <value>The state transition delay. Default is 100 milliseconds.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the value is negative.
            </exception>
        </member>
        <member name="P:BallDragDrop.Models.BallStateConfiguration.EnableStateLogging">
            <summary>
            Gets or sets a value indicating whether state transitions should be logged.
            When enabled, all state transitions will be logged for debugging and monitoring purposes.
            </summary>
            <value><c>true</c> if state logging is enabled; otherwise, <c>false</c>. Default is <c>true</c>.</value>
        </member>
        <member name="P:BallDragDrop.Models.BallStateConfiguration.EnableVisualFeedback">
            <summary>
            Gets or sets a value indicating whether visual feedback should be provided for state changes.
            When enabled, the ball will display visual indicators that reflect its current state.
            </summary>
            <value><c>true</c> if visual feedback is enabled; otherwise, <c>false</c>. Default is <c>true</c>.</value>
        </member>
        <member name="P:BallDragDrop.Models.BallStateConfiguration.EnableTransitionValidation">
            <summary>
            Gets or sets a value indicating whether state transition validation should be performed.
            When enabled, the state machine will validate transitions and reject invalid ones.
            Disabling this can improve performance but may allow invalid state transitions.
            </summary>
            <value><c>true</c> if transition validation is enabled; otherwise, <c>false</c>. Default is <c>true</c>.</value>
        </member>
        <member name="P:BallDragDrop.Models.BallStateConfiguration.EnableAsyncNotifications">
            <summary>
            Gets or sets a value indicating whether observer notifications should be sent asynchronously.
            When enabled, state change notifications to observers will be sent on a background thread
            to prevent blocking the state machine operations.
            </summary>
            <value><c>true</c> if async notifications are enabled; otherwise, <c>false</c>. Default is <c>false</c>.</value>
        </member>
        <member name="M:BallDragDrop.Models.BallStateConfiguration.IsValid">
            <summary>
            Validates the current configuration settings.
            This method checks that all configuration values are within acceptable ranges
            and that the configuration is internally consistent.
            </summary>
            <returns><c>true</c> if the configuration is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BallDragDrop.Models.BallStateConfiguration.CreateDefault">
            <summary>
            Creates a copy of the current configuration with default values restored.
            This method is useful for resetting configuration to known good defaults.
            </summary>
            <returns>A new <see cref="T:BallDragDrop.Models.BallStateConfiguration"/> instance with default values.</returns>
        </member>
        <member name="M:BallDragDrop.Models.BallStateConfiguration.ToString">
            <summary>
            Returns a string representation of the configuration for debugging purposes.
            </summary>
            <returns>A string containing the current configuration values.</returns>
        </member>
        <member name="T:BallDragDrop.Models.BallTrigger">
            <summary>
            Represents the triggers that can cause state transitions in the ball state machine.
            These triggers correspond to user actions and system events that change the ball's state.
            </summary>
        </member>
        <member name="F:BallDragDrop.Models.BallTrigger.MouseDown">
            <summary>
            Triggered when the user presses the mouse button down on the ball.
            This trigger causes the transition from Idle state to Held state,
            indicating that the user has started interacting with the ball.
            </summary>
        </member>
        <member name="F:BallDragDrop.Models.BallTrigger.Release">
            <summary>
            Triggered when the user releases the mouse button after holding the ball.
            This trigger causes the transition from Held state to Thrown state,
            indicating that the ball has been released and should be subject to physics.
            </summary>
        </member>
        <member name="F:BallDragDrop.Models.BallTrigger.VelocityBelowThreshold">
            <summary>
            Triggered automatically when the ball's velocity drops below the configured threshold.
            This trigger causes the transition from Thrown state back to Idle state,
            indicating that the ball has come to rest and is no longer in motion.
            </summary>
        </member>
        <member name="F:BallDragDrop.Models.BallTrigger.Reset">
            <summary>
            Triggered when the user activates the reset function (e.g., through menu or keyboard shortcut).
            This trigger causes the transition from any state back to Idle state,
            resetting the ball to its initial position and clearing all velocity.
            </summary>
        </member>
        <member name="T:BallDragDrop.Models.DualTimerCoordinationMetrics">
            <summary>
            Comprehensive metrics for dual timer system coordination
            Combines physics and animation timing metrics for performance analysis
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.PhysicsMetrics">
            <summary>
            Gets or sets the physics timer performance metrics
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.AnimationMetrics">
            <summary>
            Gets or sets the animation timing metrics
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.IsCoordinationOptimal">
            <summary>
            Gets or sets whether the timer coordination is optimal
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.CoordinationEfficiency">
            <summary>
            Gets or sets the coordination efficiency as a percentage
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.IsPerformanceAcceptable">
            <summary>
            Gets whether both timers are performing within acceptable bounds
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.IsProperlySeparated">
            <summary>
            Gets whether the system is properly separating physics and animation updates
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.IsDragResponsive">
            <summary>
            Gets whether drag responsiveness is being maintained
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.IsRespectingSourceFrameRates">
            <summary>
            Gets whether source animation frame rates are being respected
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.DualTimerCoordinationMetrics.SystemHealthScore">
            <summary>
            Gets the overall system health score (0-100)
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.DualTimerCoordinationMetrics.ToString">
            <summary>
            Returns a string representation of the dual timer coordination metrics
            </summary>
            <returns>Formatted coordination metrics string</returns>
        </member>
        <member name="T:BallDragDrop.Models.FpsReading">
            <summary>
            Represents a single FPS reading with timestamp
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.FpsReading.Fps">
            <summary>
            Gets or sets the FPS value
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.FpsReading.Timestamp">
            <summary>
            Gets or sets the timestamp when this reading was taken
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.FpsReading.#ctor(System.Double,System.DateTime)">
            <summary>
            Initializes a new instance of the FpsReading struct
            </summary>
            <param name="fps">The FPS value</param>
            <param name="timestamp">The timestamp when this reading was taken</param>
        </member>
        <member name="T:BallDragDrop.Models.PhysicsEngine">
            <summary>
            Provides physics calculations for ball movement including velocity, friction, and collisions.
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.PhysicsEngine.FrictionCoefficient">
            <summary>
            Gets or sets the friction coefficient (0-1 where 1 is no friction)
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.PhysicsEngine.Gravity">
            <summary>
            Gets or sets the gravity acceleration in pixels per second squared
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.PhysicsEngine.BounceFactor">
            <summary>
            Gets or sets the bounce elasticity factor (0-1 where 1 is perfect bounce)
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.#ctor">
            <summary>
            Initializes a new instance of the PhysicsEngine class with default values.
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PhysicsEngine class with specified values.
            </summary>
            <param name="frictionCoefficient">Coefficient of friction (0-1 where 1 is no friction)</param>
            <param name="gravity">Gravity acceleration in pixels per second squared</param>
            <param name="bounceFactor">Bounce elasticity factor (0-1 where 1 is perfect bounce)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when friction coefficient or bounce factor is not between 0 and 1</exception>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.UpdateBall(BallDragDrop.Models.BallModel,System.Double,System.Double,System.Double,System.Double,System.Double,BallDragDrop.Models.BallState,BallDragDrop.Models.BallStateConfiguration)">
            <summary>
            Updates the ball's position and velocity based on physics calculations.
            </summary>
            <param name="ball">The ball model to update</param>
            <param name="timeStep">Time step for the update in seconds</param>
            <param name="minX">Minimum X boundary</param>
            <param name="minY">Minimum Y boundary</param>
            <param name="maxX">Maximum X boundary</param>
            <param name="maxY">Maximum Y boundary</param>
            <param name="currentState">Current state of the ball for state-dependent physics behavior</param>
            <param name="stateConfiguration">Configuration for state machine behavior including velocity threshold</param>
            <returns>A tuple containing whether the ball is still moving, which boundaries were hit, and whether velocity dropped below threshold</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.HandleCollisions(BallDragDrop.Models.BallModel,System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Handles collisions with boundaries and updates velocity for bouncing.
            </summary>
            <param name="ball">The ball model</param>
            <param name="newX">New X position (will be modified if collision occurs)</param>
            <param name="newY">New Y position (will be modified if collision occurs)</param>
            <param name="minX">Minimum X boundary</param>
            <param name="minY">Minimum Y boundary</param>
            <param name="maxX">Maximum X boundary</param>
            <param name="maxY">Maximum Y boundary</param>
            <returns>A tuple indicating which boundaries were hit (left, right, top, bottom)</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.CalculateVelocity(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the velocity based on the movement delta and time elapsed.
            </summary>
            <param name="deltaX">Change in X position</param>
            <param name="deltaY">Change in Y position</param>
            <param name="timeElapsed">Time elapsed in seconds</param>
            <returns>A tuple containing the X and Y velocity components</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.CalculateVelocityFromHistory(System.Windows.Point[],System.DateTime[],System.Int32)">
            <summary>
            Calculates velocity based on a series of mouse positions and timestamps.
            This provides a more accurate velocity calculation by considering multiple data points.
            </summary>
            <param name="positions">Array of mouse positions</param>
            <param name="timestamps">Array of timestamps corresponding to the positions</param>
            <param name="count">Number of valid positions to consider (most recent ones)</param>
            <returns>A tuple containing the X and Y velocity components</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.IsThrow(System.Double,System.Double,System.Double)">
            <summary>
            Determines if a movement should be considered a throw based on velocity.
            </summary>
            <param name="velocityX">X velocity component</param>
            <param name="velocityY">Y velocity component</param>
            <param name="throwThreshold">Velocity threshold for considering a movement a throw</param>
            <returns>True if the movement is a throw, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.IsThrowFromHistory(System.Windows.Point[],System.DateTime[],System.Int32,System.Double)">
            <summary>
            Determines if a movement should be considered a throw based on velocity and movement pattern.
            </summary>
            <param name="positions">Array of mouse positions</param>
            <param name="timestamps">Array of timestamps corresponding to the positions</param>
            <param name="count">Number of valid positions to consider</param>
            <param name="throwThreshold">Velocity threshold for considering a movement a throw</param>
            <returns>True if the movement is a throw, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.ApplyForce(BallDragDrop.Models.BallModel,System.Double,System.Double,System.Double)">
            <summary>
            Applies a force to the ball, changing its velocity.
            </summary>
            <param name="ball">The ball model</param>
            <param name="forceX">Force in X direction</param>
            <param name="forceY">Force in Y direction</param>
            <param name="timeStep">Time step for the force application in seconds</param>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.CalculateDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance between two points.
            </summary>
            <param name="x1">X coordinate of the first point</param>
            <param name="y1">Y coordinate of the first point</param>
            <param name="x2">X coordinate of the second point</param>
            <param name="y2">Y coordinate of the second point</param>
            <returns>The distance between the two points</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.DetectAndResolveCollision(BallDragDrop.Models.BallModel,BallDragDrop.Models.BallModel)">
            <summary>
            Detects collision between two balls and handles the physics response.
            </summary>
            <param name="ball1">The first ball</param>
            <param name="ball2">The second ball</param>
            <returns>True if the balls collided, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.DetectCollision(BallDragDrop.Models.BallModel,BallDragDrop.Models.BallModel)">
            <summary>
            Detects if two balls are colliding without resolving the collision.
            </summary>
            <param name="ball1">The first ball</param>
            <param name="ball2">The second ball</param>
            <returns>True if the balls are colliding, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.ValidateDouble(System.Double,System.Double)">
            <summary>
            Validates a double value to ensure it's not NaN or Infinity
            </summary>
            <param name="value">The value to validate</param>
            <param name="fallback">The fallback value to use if validation fails</param>
            <returns>The validated value or fallback if invalid</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.IsValidDouble(System.Double)">
            <summary>
            Checks if a double value is valid (not NaN or Infinity)
            </summary>
            <param name="value">The value to check</param>
            <returns>True if the value is valid, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.ShouldApplyPhysics(BallDragDrop.Models.BallState)">
            <summary>
            Determines if physics calculations should be applied based on the ball state
            </summary>
            <param name="state">Current ball state</param>
            <returns>True if physics should be applied, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.ShouldCheckVelocityThreshold(BallDragDrop.Models.BallState)">
            <summary>
            Determines if velocity threshold checking should be performed based on the ball state
            </summary>
            <param name="state">Current ball state</param>
            <returns>True if velocity threshold should be checked, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.CalculateVelocityMagnitude(BallDragDrop.Models.BallModel)">
            <summary>
            Calculates the velocity magnitude of the ball
            </summary>
            <param name="ball">The ball model</param>
            <returns>The velocity magnitude</returns>
        </member>
        <member name="M:BallDragDrop.Models.PhysicsEngine.IsVelocityBelowThreshold(BallDragDrop.Models.BallModel,BallDragDrop.Models.BallStateConfiguration)">
            <summary>
            Checks if the ball's velocity is below the configured threshold
            </summary>
            <param name="ball">The ball model</param>
            <param name="stateConfiguration">State configuration containing velocity threshold</param>
            <returns>True if velocity is below threshold, false otherwise</returns>
        </member>
        <member name="T:BallDragDrop.Models.TimerPerformanceMetrics">
            <summary>
            Performance metrics for the dual timer system
            Used to monitor and optimize physics and animation timing coordination
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.PhysicsTimerEnabled">
            <summary>
            Gets or sets whether the physics timer is currently enabled
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.PhysicsUpdateInterval">
            <summary>
            Gets or sets the physics update interval (target: 60 FPS = ~16.67ms)
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.IsPhysicsRunning">
            <summary>
            Gets or sets whether physics simulation is currently running
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.PhysicsUpdateCount">
            <summary>
            Gets or sets the total number of physics updates performed
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.UseOptimizedTimers">
            <summary>
            Gets or sets whether the optimized dual timer system is being used
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.AverageFrameTime">
            <summary>
            Gets or sets the average frame time in milliseconds
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.AveragePhysicsTime">
            <summary>
            Gets or sets the average physics update time in milliseconds
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.PhysicsFPS">
            <summary>
            Gets the effective physics FPS based on the update interval
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.FrameFPS">
            <summary>
            Gets the effective frame FPS based on average frame time
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.IsPhysicsTimingOptimal">
            <summary>
            Gets whether the physics timing is meeting the 60 FPS target
            </summary>
        </member>
        <member name="P:BallDragDrop.Models.TimerPerformanceMetrics.PhysicsTimingEfficiency">
            <summary>
            Gets the physics timing efficiency as a percentage
            </summary>
        </member>
        <member name="M:BallDragDrop.Models.TimerPerformanceMetrics.ToString">
            <summary>
            Returns a string representation of the performance metrics
            </summary>
            <returns>Formatted performance metrics string</returns>
        </member>
        <member name="T:BallDragDrop.Services.BallStateMachine">
            <summary>
            Implementation of the ball state machine using the Stateless library.
            Manages state transitions for the ball and provides observer notifications.
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.#ctor(BallDragDrop.Contracts.ILogService,BallDragDrop.Models.BallStateConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:BallDragDrop.Services.BallStateMachine"/> class.
            </summary>
            <param name="logService">The logging service for state transition logging.</param>
            <param name="configuration">The configuration settings for the state machine.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="logService"/> or <paramref name="configuration"/> is null.
            </exception>
        </member>
        <member name="P:BallDragDrop.Services.BallStateMachine.CurrentState">
            <summary>
            Gets the current state of the ball.
            </summary>
        </member>
        <member name="E:BallDragDrop.Services.BallStateMachine.StateChanged">
            <summary>
            Occurs when the ball state changes.
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.Fire(BallDragDrop.Models.BallTrigger)">
            <summary>
            Fires the specified trigger to attempt a state transition.
            </summary>
            <param name="trigger">The trigger to fire.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the trigger is not valid for the current state.
            </exception>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.CanFire(BallDragDrop.Models.BallTrigger)">
            <summary>
            Determines whether the specified trigger can be fired in the current state.
            </summary>
            <param name="trigger">The trigger to check.</param>
            <returns>
            <c>true</c> if the trigger can be fired in the current state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.Subscribe(BallDragDrop.Contracts.IBallStateObserver)">
            <summary>
            Subscribes an observer to receive state change notifications.
            </summary>
            <param name="observer">The observer to subscribe.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="observer"/> is null.
            </exception>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.Unsubscribe(BallDragDrop.Contracts.IBallStateObserver)">
            <summary>
            Unsubscribes an observer from state change notifications.
            </summary>
            <param name="observer">The observer to unsubscribe.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="observer"/> is null.
            </exception>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.ConfigureStateMachine">
            <summary>
            Configures the state machine with valid state transitions.
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.NotifyObservers(BallDragDrop.Models.BallState,BallDragDrop.Models.BallState,BallDragDrop.Models.BallTrigger)">
            <summary>
            Notifies all registered observers of a state change.
            </summary>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
            <param name="trigger">The trigger that caused the change.</param>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.NotifyObserversSync(System.Collections.Generic.List{BallDragDrop.Contracts.IBallStateObserver},BallDragDrop.Models.BallState,BallDragDrop.Models.BallState,BallDragDrop.Models.BallTrigger)">
            <summary>
            Synchronously notifies observers of a state change.
            </summary>
            <param name="observers">The list of observers to notify.</param>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
            <param name="trigger">The trigger that caused the change.</param>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.ValidateStateConsistency">
            <summary>
            Validates the current state consistency of the state machine.
            This method checks that the state machine is in a valid state and can perform expected operations.
            </summary>
            <returns><c>true</c> if the state machine is consistent; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.RecoverToSafeState">
            <summary>
            Attempts to recover the state machine to a safe state when errors are detected.
            This method should be called when state inconsistencies are detected or when
            the state machine encounters unrecoverable errors.
            </summary>
            <returns><c>true</c> if recovery was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BallDragDrop.Services.BallStateMachine.HandleStateTransitionError(System.Exception,BallDragDrop.Models.BallTrigger,BallDragDrop.Models.BallState)">
            <summary>
            Handles state transition errors by logging them and attempting recovery if necessary.
            </summary>
            <param name="ex">The exception that occurred during state transition.</param>
            <param name="trigger">The trigger that caused the error.</param>
            <param name="currentState">The current state when the error occurred.</param>
        </member>
        <member name="T:BallDragDrop.Services.ConfigurationService">
            <summary>
            Service for managing application configuration using Config.Net
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ConfigurationService.#ctor(BallDragDrop.Contracts.ILogService)">
            <summary>
            Initializes a new instance of the ConfigurationService class
            </summary>
            <param name="logService">The logging service</param>
        </member>
        <member name="M:BallDragDrop.Services.ConfigurationService.#ctor(BallDragDrop.Contracts.ILogService,System.String)">
            <summary>
            Initializes a new instance of the ConfigurationService class with a custom config file path (for testing)
            </summary>
            <param name="logService">The logging service</param>
            <param name="configFilePath">The custom configuration file path</param>
        </member>
        <member name="P:BallDragDrop.Services.ConfigurationService.Configuration">
            <summary>
            Gets the application configuration
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ConfigurationService.Initialize">
            <summary>
            Initializes the configuration service using Config.Net
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ConfigurationService.GetDefaultBallImagePath">
            <summary>
            Gets the default ball image path from configuration
            </summary>
            <returns>The default ball image path</returns>
        </member>
        <member name="M:BallDragDrop.Services.ConfigurationService.SetDefaultBallImagePath(System.String)">
            <summary>
            Sets the default ball image path in configuration
            </summary>
            <param name="path">The path to set as default</param>
        </member>
        <member name="M:BallDragDrop.Services.ConfigurationService.ValidateImagePath(System.String)">
            <summary>
            Validates if the specified image path exists and is accessible
            </summary>
            <param name="path">The image path to validate</param>
            <returns>True if the path is valid, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.ConfigurationService.GetShowBoundingBox">
            <summary>
            Gets whether to show the ball's bounding box for debugging
            </summary>
            <returns>True if bounding box should be shown, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.ConfigurationService.SetShowBoundingBox(System.Boolean)">
            <summary>
            Sets whether to show the ball's bounding box for debugging
            </summary>
            <param name="show">True to show bounding box, false to hide</param>
        </member>
        <member name="T:BallDragDrop.Services.EventThrottler">
            <summary>
            Utility class for throttling events to limit their frequency
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.EventThrottler.#ctor(System.Action,System.Int32)">
            <summary>
            Initializes a new instance of the EventThrottler class
            </summary>
            <param name="action">The action to execute when throttled</param>
            <param name="intervalMs">The minimum interval between executions in milliseconds</param>
            <exception cref="T:System.ArgumentNullException">Thrown when action is null</exception>
        </member>
        <member name="F:BallDragDrop.Services.EventThrottler._timer">
            <summary>
            Timer for delayed execution
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.EventThrottler._action">
            <summary>
            Action to execute when throttled
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.EventThrottler._interval">
            <summary>
            Minimum interval between executions
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.EventThrottler._isQueued">
            <summary>
            Flag indicating if an execution is queued
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.EventThrottler._lastExecutionTime">
            <summary>
            Timestamp of the last execution
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.EventThrottler.Execute">
            <summary>
            Executes the action, throttling if called too frequently
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.EventThrottler.ExecuteNow">
            <summary>
            Executes the action immediately, bypassing throttling
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.EventThrottler.Timer_Tick(System.Object,System.EventArgs)">
            <summary>
            Event handler for the timer tick
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.ExceptionHandlingService">
            <summary>
            Basic implementation of exception handling service
            This is a placeholder implementation that will be enhanced in task 5
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ExceptionHandlingService.#ctor(BallDragDrop.Contracts.ILogService)">
            <summary>
            Initializes a new instance of the ExceptionHandlingService class
            </summary>
            <param name="logService">The logging service to use for recording exceptions</param>
            <exception cref="T:System.ArgumentNullException">Thrown when logService is null</exception>
        </member>
        <member name="F:BallDragDrop.Services.ExceptionHandlingService._logService">
            <summary>
            Logging service for recording exception information
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ExceptionHandlingService.HandleException(System.Exception,System.String)">
            <summary>
            Handles an exception by logging it with the provided context
            </summary>
            <param name="exception">The exception to handle</param>
            <param name="context">Additional context information about where the exception occurred</param>
        </member>
        <member name="M:BallDragDrop.Services.ExceptionHandlingService.CaptureApplicationContext">
            <summary>
            Captures the current application context for error reporting
            </summary>
            <returns>An object containing application state information</returns>
        </member>
        <member name="M:BallDragDrop.Services.ExceptionHandlingService.GenerateUserFriendlyMessage(System.Exception)">
            <summary>
            Generates a user-friendly error message based on the exception type
            </summary>
            <param name="exception">The exception to generate a message for</param>
            <returns>A user-friendly error message</returns>
        </member>
        <member name="M:BallDragDrop.Services.ExceptionHandlingService.AttemptRecovery(System.Exception)">
            <summary>
            Attempts to recover from an exception
            </summary>
            <param name="exception">The exception to attempt recovery from</param>
            <returns>True if recovery was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.ExceptionHandlingService.ReportCriticalError(System.Exception,System.Object)">
            <summary>
            Reports a critical error with application state information
            </summary>
            <param name="exception">The critical exception that occurred</param>
            <param name="applicationState">The current application state</param>
        </member>
        <member name="T:BallDragDrop.Services.FpsCalculator">
            <summary>
            Utility class for calculating 10-second rolling average FPS
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.FpsCalculator._fpsReadings">
            <summary>
            List storing FPS readings for the last 10 seconds
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.FpsCalculator._lock">
            <summary>
            Lock object for thread-safe access to FPS readings
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.FpsCalculator._timeWindow">
            <summary>
            Time window for calculating average (10 seconds)
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.FpsCalculator.AverageFps">
            <summary>
            Gets the current 10-second average FPS
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.FpsCalculator.#ctor">
            <summary>
            Initializes a new instance of the FpsCalculator class
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.FpsCalculator.AddFpsReading(System.Double)">
            <summary>
            Adds a new FPS reading to the calculation
            </summary>
            <param name="fps">The FPS value to add</param>
        </member>
        <member name="M:BallDragDrop.Services.FpsCalculator.GetAverageFps">
            <summary>
            Gets the current 10-second average FPS
            </summary>
            <returns>The average FPS over the last 10 seconds, or 0 if no valid readings</returns>
        </member>
        <member name="M:BallDragDrop.Services.FpsCalculator.CleanupOldReadings(System.DateTime)">
            <summary>
            Removes FPS readings older than the time window
            </summary>
            <param name="currentTime">Current timestamp for comparison</param>
        </member>
        <member name="M:BallDragDrop.Services.FpsCalculator.GetReadingCount">
            <summary>
            Gets the number of FPS readings currently stored
            </summary>
            <returns>The count of FPS readings</returns>
        </member>
        <member name="M:BallDragDrop.Services.FpsCalculator.Clear">
            <summary>
            Clears all FPS readings
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.GifData">
            <summary>
            Data structure for holding GIF animation data
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.GifData.Frames">
            <summary>
            Gets or sets the list of animation frames
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.GifData.LoopCount">
            <summary>
            Gets or sets the loop count (0 = infinite, -1 = no looping)
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.GifData.TotalDuration">
            <summary>
            Gets or sets the total duration of the animation
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.VisualContentType">
            <summary>
            Enumeration for supported visual content types
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.VisualContentType.StaticImage">
            <summary>
            Static image content
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.VisualContentType.GifAnimation">
            <summary>
            GIF animation content
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.VisualContentType.AsepriteAnimation">
            <summary>
            Aseprite animation content
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.VisualContentType.Unknown">
            <summary>
            Unknown content type
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.ImageService">
            <summary>
            Service for loading and managing visual content including static images and animations
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.ImageService.CurrentFrame">
            <summary>
            Gets the current frame for display
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.ImageService.IsAnimated">
            <summary>
            Gets a value indicating whether the current content is animated
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.ImageService.FrameDuration">
            <summary>
            Gets the duration of the current frame
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.ImageService.ContentType">
            <summary>
            Gets the type of the currently loaded visual content
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.#ctor(BallDragDrop.Contracts.ILogService)">
            <summary>
            Initializes a new instance of the ImageService class
            </summary>
            <param name="logService">Optional logging service</param>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.LoadBallVisualAsync(System.String)">
            <summary>
            Loads visual content from the specified file path
            </summary>
            <param name="filePath">Path to the visual content file</param>
            <returns>True if loading was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.StartAnimation">
            <summary>
            Starts animation playback if the current content is animated
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.StopAnimation">
            <summary>
            Stops animation playback if the current content is animated
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.UpdateFrame">
            <summary>
            Updates the current frame for animated content
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.GetFallbackImage">
            <summary>
            Gets a fallback image when content cannot be loaded
            </summary>
            <returns>ImageSource representing a fallback ball image</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.SwitchVisualContentAsync(System.String,System.Boolean)">
            <summary>
            Switches visual content while preserving animation state and playback position
            </summary>
            <param name="filePath">Path to the new visual content file</param>
            <param name="preservePlaybackState">Whether to preserve current animation playback state</param>
            <returns>True if switching was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.DetectFileType(System.String)">
            <summary>
            Detects the type of visual content based on file extension and content
            </summary>
            <param name="filePath">Path to the file</param>
            <returns>The detected visual content type</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.LoadStaticImageAsync(System.String)">
            <summary>
            Loads a static image from the specified path
            </summary>
            <param name="filePath">Path to the image file</param>
            <returns>True if loading was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.LoadGifAnimationAsync(System.String)">
            <summary>
            Loads a GIF animation from the specified path
            </summary>
            <param name="filePath">Path to the GIF file</param>
            <returns>True if loading was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.LoadAsepriteAnimationAsync(System.String)">
            <summary>
            Loads an Aseprite animation from the specified PNG and JSON files
            </summary>
            <param name="pngPath">Path to the PNG sprite sheet</param>
            <returns>True if loading was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.ExtractGifData(System.String,BallDragDrop.Contracts.ILogService)">
            <summary>
            Extracts complete GIF data including frames, timing, and loop information
            </summary>
            <param name="gifPath">Path to the GIF file</param>
            <param name="logService">Optional logging service</param>
            <returns>GifData containing frames and metadata, or null if extraction failed</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.ExtractGifFrames(System.String,BallDragDrop.Contracts.ILogService)">
            <summary>
            Extracts frames from a GIF file (legacy method for backward compatibility)
            </summary>
            <param name="gifPath">Path to the GIF file</param>
            <param name="logService">Optional logging service</param>
            <returns>List of animation frames extracted from the GIF</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.GetGifFrameDelay(System.Windows.Media.Imaging.BitmapMetadata,BallDragDrop.Contracts.ILogService)">
            <summary>
            Gets the frame delay from GIF metadata
            </summary>
            <param name="metadata">Bitmap metadata from the GIF frame</param>
            <param name="logService">Optional logging service</param>
            <returns>TimeSpan representing the frame delay</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.GetGifLoopCount(System.Windows.Media.Imaging.BitmapMetadata,BallDragDrop.Contracts.ILogService)">
            <summary>
            Gets the loop count from GIF global metadata
            </summary>
            <param name="metadata">Global bitmap metadata from the GIF</param>
            <param name="logService">Optional logging service</param>
            <returns>Loop count (0 means infinite loop, -1 means no loop info found)</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.GetDefaultAnimationSequence(BallDragDrop.Models.AsepriteData,System.Collections.Generic.List{BallDragDrop.Models.AnimationFrame})">
            <summary>
            Gets the default animation sequence from Aseprite data
            If multiple animation tags exist, uses the first one; otherwise uses all frames
            </summary>
            <param name="asepriteData">The Aseprite data containing frame tags</param>
            <param name="allFrames">All available animation frames</param>
            <returns>List of frames for the default animation sequence</returns>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.LoadImage(System.String,BallDragDrop.Contracts.ILogService)">
            <summary>
            Loads an image from the specified path
            </summary>
            <param name="imagePath">Path to the image file</param>
            <param name="logService">Optional logging service</param>
            <returns>ImageSource if successful, null if failed</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when imagePath is null or empty</exception>
        </member>
        <member name="M:BallDragDrop.Services.ImageService.CreateFallbackImage(System.Double,System.Windows.Media.Color,System.Windows.Media.Color,System.Double,BallDragDrop.Contracts.ILogService)">
            <summary>
            Creates a fallback image (a simple circle) when the actual image cannot be loaded
            </summary>
            <param name="radius">Radius of the circle</param>
            <param name="fillColor">Fill color of the circle</param>
            <param name="strokeColor">Stroke color of the circle</param>
            <param name="strokeThickness">Stroke thickness of the circle</param>
            <param name="logService">Optional logging service</param>
            <returns>ImageSource representing a circle</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when radius is less than or equal to zero</exception>
        </member>
        <member name="T:BallDragDrop.Services.Log4NetService">
            <summary>
            Enhanced Log4NET implementation of ILogService with performance optimizations
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.#ctor(BallDragDrop.Contracts.IPerformanceMonitor)">
            <summary>
            Initializes a new instance of the Log4NetService class
            </summary>
            <param name="performanceMonitor">Optional performance monitor instance</param>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService._logger">
            <summary>
            Log4NET logger instance
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService._performanceMonitor">
            <summary>
            Performance monitor for tracking logging operations
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService._logEntryPool">
            <summary>
            Object pool for log entries to reduce GC pressure
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService._asyncProcessor">
            <summary>
            Async processor for batched log processing
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService._correlationId">
            <summary>
            Current correlation ID for tracking related log entries
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService._disposed">
            <summary>
            Flag indicating if the service has been disposed
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogTrace(System.String,System.Object[])">
            <summary>
            Logs a trace message
            </summary>
            <param name="message">The message to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogDebug(System.String,System.Object[])">
            <summary>
            Logs a debug message
            </summary>
            <param name="message">The message to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogInformation(System.String,System.Object[])">
            <summary>
            Logs an information message
            </summary>
            <param name="message">The message to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogWarning(System.String,System.Object[])">
            <summary>
            Logs a warning message
            </summary>
            <param name="message">The message to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogError(System.String,System.Object[])">
            <summary>
            Logs an error message
            </summary>
            <param name="message">The message to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error message with an associated exception
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogCritical(System.String,System.Object[])">
            <summary>
            Logs a critical message
            </summary>
            <param name="message">The message to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogCritical(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a critical message with an associated exception
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogStructured(BallDragDrop.Contracts.LogLevel,System.String,System.Object[])">
            <summary>
            Logs a structured message with property values
            </summary>
            <param name="level">The log level</param>
            <param name="messageTemplate">The message template</param>
            <param name="propertyValues">Property values for the template</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogStructured(BallDragDrop.Contracts.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a structured message with an exception and property values
            </summary>
            <param name="level">The log level</param>
            <param name="exception">The exception to log</param>
            <param name="messageTemplate">The message template</param>
            <param name="propertyValues">Property values for the template</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.BeginScope(System.String,System.Object[])">
            <summary>
            Begins a logging scope
            </summary>
            <param name="scopeName">Name of the scope</param>
            <param name="parameters">Parameters for the scope</param>
            <returns>A disposable scope object</returns>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogMethodEntry(System.String,System.Object[])">
            <summary>
            Logs method entry
            </summary>
            <param name="methodName">Name of the method</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogMethodExit(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Logs method exit
            </summary>
            <param name="methodName">Name of the method</param>
            <param name="returnValue">Return value of the method</param>
            <param name="duration">Duration of method execution</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogPerformance(System.String,System.TimeSpan,System.Object[])">
            <summary>
            Logs performance information
            </summary>
            <param name="operationName">Name of the operation</param>
            <param name="duration">Duration of the operation</param>
            <param name="additionalData">Additional data to log</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.SetCorrelationId(System.String)">
            <summary>
            Sets the correlation ID for tracking related log entries
            </summary>
            <param name="correlationId">The correlation ID to set</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.GetCorrelationId">
            <summary>
            Gets the current correlation ID
            </summary>
            <returns>The current correlation ID</returns>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.GetPerformanceStatistics">
            <summary>
            Gets current performance statistics
            </summary>
            <returns>Current performance statistics</returns>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.ResetPerformanceCounters">
            <summary>
            Resets performance counters
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogWithPerformanceTracking(BallDragDrop.Contracts.LogLevel,System.String,System.Exception,System.Object[])">
            <summary>
            Logs a message with performance tracking
            </summary>
            <param name="level">The log level</param>
            <param name="message">The message to log</param>
            <param name="exception">Optional exception to log</param>
            <param name="args">Arguments for string formatting</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.CreatePropertiesDictionary(System.Object[])">
            <summary>
            Creates a properties dictionary from property values
            </summary>
            <param name="propertyValues">The property values to convert</param>
            <returns>A dictionary of properties</returns>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.FormatStructuredMessage(System.String,System.Object[])">
            <summary>
            Formats a structured logging message by converting {PropertyName} syntax to positional parameters
            </summary>
            <param name="message">The message template with structured logging syntax</param>
            <param name="args">The arguments to substitute</param>
            <returns>A formatted message string</returns>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.Dispose">
            <summary>
            Disposes the service and releases all resources
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.Log4NetService.LogScope">
            <summary>
            Represents a logging scope that tracks duration
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService.LogScope._logService">
            <summary>
            Reference to the log service
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService.LogScope._scopeName">
            <summary>
            Name of the scope
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Log4NetService.LogScope._stopwatch">
            <summary>
            Stopwatch for measuring scope duration
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogScope.#ctor(BallDragDrop.Services.Log4NetService,System.String)">
            <summary>
            Initializes a new instance of the LogScope class
            </summary>
            <param name="logService">The log service</param>
            <param name="scopeName">Name of the scope</param>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.LogScope.Dispose">
            <summary>
            Disposes the scope and logs the duration
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.Log4NetService.DisposableScope">
            <summary>
            Empty disposable scope for fallback scenarios
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Log4NetService.DisposableScope.Dispose">
            <summary>
            Empty dispose implementation
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.MethodLoggingInterceptor">
            <summary>
            Basic implementation of method logging interceptor
            This is a placeholder implementation that will be enhanced in task 4
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.MethodLoggingInterceptor.#ctor(BallDragDrop.Contracts.ILogService)">
            <summary>
            Initializes a new instance of the MethodLoggingInterceptor class
            </summary>
            <param name="logService">The logging service to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown when logService is null</exception>
        </member>
        <member name="F:BallDragDrop.Services.MethodLoggingInterceptor._logService">
            <summary>
            Logging service for recording method interception information
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.MethodLoggingInterceptor.ConfigureMethodFilter(System.String,System.Boolean)">
            <summary>
            Configures whether a specific method should be intercepted for logging
            </summary>
            <param name="methodName">The name of the method to configure</param>
            <param name="shouldIntercept">True to enable interception, false to disable</param>
        </member>
        <member name="M:BallDragDrop.Services.MethodLoggingInterceptor.SetParameterLogging(System.Boolean)">
            <summary>
            Enables or disables parameter logging for intercepted methods
            </summary>
            <param name="enabled">True to enable parameter logging, false to disable</param>
        </member>
        <member name="T:BallDragDrop.Services.PerformanceMonitor">
            <summary>
            Service for monitoring and analyzing application performance metrics
            </summary>
        </member>
        <member name="E:BallDragDrop.Services.PerformanceMonitor.MetricsUpdated">
            <summary>
            Event raised when performance metrics are updated
            </summary>
        </member>
        <member name="E:BallDragDrop.Services.PerformanceMonitor.FpsUpdated">
            <summary>
            Event raised when FPS values are updated for real-time notifications
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMonitor.AverageFrameTime">
            <summary>
            Gets the average frame time in milliseconds
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMonitor.AveragePhysicsTime">
            <summary>
            Gets the average physics update time in milliseconds
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMonitor.CurrentFps">
            <summary>
            Gets the current frames per second
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PerformanceMonitor class
            </summary>
            <param name="targetFrameRate">Target frame rate for the application</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when targetFrameRate is less than or equal to zero</exception>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._frameTimesMs">
            <summary>
            Queue storing recent frame times for averaging
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._physicsTimesMs">
            <summary>
            Queue storing recent physics update times for averaging
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._frameStopwatch">
            <summary>
            Stopwatch for measuring frame rendering time
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._physicsStopwatch">
            <summary>
            Stopwatch for measuring physics update time
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._averageFrameTimeMs">
            <summary>
            Average frame time in milliseconds
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._averagePhysicsTimeMs">
            <summary>
            Average physics update time in milliseconds
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._maxFrameTimeMs">
            <summary>
            Maximum frame time recorded in the current period
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._maxPhysicsTimeMs">
            <summary>
            Maximum physics update time recorded in the current period
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._frameCount">
            <summary>
            Number of frames rendered since last metrics update
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._physicsCount">
            <summary>
            Number of physics updates since last metrics update
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._lastMetricsUpdate">
            <summary>
            Timestamp of the last metrics update
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._targetFrameRate">
            <summary>
            Target frame rate for the application
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._targetFrameTime">
            <summary>
            Target time per frame based on target frame rate
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._lastFrameTime">
            <summary>
            Timestamp of the last frame rendering
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._currentFps">
            <summary>
            Current frames per second value
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._lock">
            <summary>
            Lock object for thread-safe access to FPS data
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._lastFpsUpdate">
            <summary>
            Timestamp of the last FPS update
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.PerformanceMonitor._fpsUpdateInterval">
            <summary>
            Interval for FPS update notifications (100ms = 10 Hz)
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.BeginFrameTime">
            <summary>
            Begins measuring a new frame time
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.EndFrameTime">
            <summary>
            Ends the current frame time measurement and records the result
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.BeginPhysicsTime">
            <summary>
            Begins measuring a new physics update time
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.EndPhysicsTime">
            <summary>
            Ends the current physics update time measurement and records the result
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.ShouldRenderFrame(System.Boolean)">
            <summary>
            Checks if a new frame should be rendered based on the target frame rate
            </summary>
            <param name="forceRender">Whether to force rendering regardless of frame rate</param>
            <returns>True if a new frame should be rendered, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.SafeUpdateMetrics">
            <summary>
            Safely updates performance metrics with exception handling
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.UpdateMetrics">
            <summary>
            Updates performance metrics and raises the MetricsUpdated event
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.PerformanceMonitor.GetCurrentMetrics">
            <summary>
            Gets the current performance metrics
            </summary>
            <returns>Current performance metrics</returns>
        </member>
        <member name="T:BallDragDrop.Services.PerformanceMetricsEventArgs">
            <summary>
            Event arguments for performance metrics updates
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMetricsEventArgs.AverageFrameTimeMs">
            <summary>
            Gets or sets the average frame time in milliseconds
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMetricsEventArgs.MaxFrameTimeMs">
            <summary>
            Gets or sets the maximum frame time in milliseconds
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMetricsEventArgs.FramesPerSecond">
            <summary>
            Gets or sets the frames per second
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMetricsEventArgs.AveragePhysicsTimeMs">
            <summary>
            Gets or sets the average physics update time in milliseconds
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMetricsEventArgs.MaxPhysicsTimeMs">
            <summary>
            Gets or sets the maximum physics update time in milliseconds
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMetricsEventArgs.FrameCount">
            <summary>
            Gets or sets the number of frames rendered since the last metrics update
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.PerformanceMetricsEventArgs.PhysicsCount">
            <summary>
            Gets or sets the number of physics updates since the last metrics update
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.FpsUpdatedEventArgs">
            <summary>
            Event arguments for FPS updates
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.FpsUpdatedEventArgs.CurrentFps">
            <summary>
            Gets or sets the current frames per second
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.Performance.AsyncLogProcessor">
            <summary>
            Async log processor with batching for efficient I/O operations
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Performance.AsyncLogProcessor.QueueLogItem(BallDragDrop.Contracts.LogLevel,System.String,System.Exception,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Queues a log item for async processing
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Performance.AsyncLogProcessor.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.Performance.LogEntryPool">
            <summary>
            Object pool for log entries to reduce GC pressure
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LogEntryPool._pool">
            <summary>
            Concurrent queue storing pooled log entries
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LogEntryPool._maxPoolSize">
            <summary>
            Maximum number of entries to keep in the pool
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LogEntryPool._currentPoolSize">
            <summary>
            Current number of entries in the pool
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LogEntryPool._disposed">
            <summary>
            Flag indicating if the pool has been disposed
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LogEntryPool.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LogEntryPool class
            </summary>
            <param name="maxPoolSize">Maximum number of entries to keep in the pool</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when maxPoolSize is less than or equal to zero</exception>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LogEntryPool.Get">
            <summary>
            Gets a log entry from the pool or creates a new one
            </summary>
            <returns>A pooled log entry instance</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the pool has been disposed</exception>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LogEntryPool.Return(BallDragDrop.Services.Performance.PooledLogEntry)">
            <summary>
            Returns a log entry to the pool
            </summary>
            <param name="entry">The log entry to return to the pool</param>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LogEntryPool.Dispose">
            <summary>
            Disposes the log entry pool and clears all pooled entries
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.Performance.LogItem">
            <summary>
            Represents a log item for async processing
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.LogItem.Level">
            <summary>
            Gets or sets the log level
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.LogItem.Message">
            <summary>
            Gets or sets the log message
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.LogItem.Exception">
            <summary>
            Gets or sets the exception associated with the log item
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.LogItem.CorrelationId">
            <summary>
            Gets or sets the correlation ID for tracking related log entries
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.LogItem.Properties">
            <summary>
            Gets or sets additional properties associated with the log item
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.LogItem.Timestamp">
            <summary>
            Gets or sets the timestamp when the log item was created
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.LogItem.ThreadId">
            <summary>
            Gets or sets the thread ID where the log item was created
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.Performance.PerformanceConfiguration">
            <summary>
            Configuration settings for logging performance optimizations
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.LogEntryPoolSize">
            <summary>
            Maximum size of the log entry object pool
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.AsyncBatchSize">
            <summary>
            Batch size for async log processing
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.AsyncBatchTimeout">
            <summary>
            Timeout for batch processing
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.EnablePerformanceMonitoring">
            <summary>
            Whether to enable performance monitoring
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.EnableAsyncLogging">
            <summary>
            Whether to enable async logging
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.EnableObjectPooling">
            <summary>
            Whether to enable object pooling
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.PerformanceReportingInterval">
            <summary>
            Interval for performance statistics reporting
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.MemoryThresholdMB">
            <summary>
            Memory threshold for triggering GC collection (in MB)
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PerformanceConfiguration.EnableAutomaticPerformanceReporting">
            <summary>
            Whether to enable automatic performance reporting
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Performance.PerformanceConfiguration.CreateDefault">
            <summary>
            Creates a default configuration optimized for performance
            </summary>
            <returns>A default performance configuration instance</returns>
        </member>
        <member name="M:BallDragDrop.Services.Performance.PerformanceConfiguration.CreateHighThroughput">
            <summary>
            Creates a configuration optimized for high-throughput scenarios
            </summary>
            <returns>A high-throughput optimized performance configuration instance</returns>
        </member>
        <member name="M:BallDragDrop.Services.Performance.PerformanceConfiguration.CreateLowMemory">
            <summary>
            Creates a configuration optimized for low-memory scenarios
            </summary>
            <returns>A low-memory optimized performance configuration instance</returns>
        </member>
        <member name="M:BallDragDrop.Services.Performance.PerformanceConfiguration.Validate">
            <summary>
            Validates the configuration settings
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when any configuration value is invalid</exception>
        </member>
        <member name="T:BallDragDrop.Services.Performance.LoggingPerformanceMonitor">
            <summary>
            Thread-safe performance monitor for logging operations
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._operationMetrics">
            <summary>
            Dictionary storing metrics for different operation types
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._totalLoggingOperations">
            <summary>
            Total number of logging operations performed
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._totalLoggingTimeTicks">
            <summary>
            Total time spent on logging operations in ticks
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._totalMemoryAllocated">
            <summary>
            Total memory allocated in bytes
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._totalMemoryFreed">
            <summary>
            Total memory freed in bytes
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._totalLogEntriesProcessed">
            <summary>
            Total number of log entries processed
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._totalBatchesProcessed">
            <summary>
            Total number of batches processed
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._totalBatchSize">
            <summary>
            Total size of all batches processed
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor._totalBatchProcessingTimeTicks">
            <summary>
            Total time spent processing batches in ticks
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.RecordLoggingOperation(System.String,System.TimeSpan)">
            <summary>
            Records a logging operation with its duration
            </summary>
            <param name="operationType">The type of operation performed</param>
            <param name="duration">The duration of the operation</param>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.RecordMemoryUsage(System.Int64,System.Int64)">
            <summary>
            Records memory usage statistics
            </summary>
            <param name="bytesAllocated">Number of bytes allocated</param>
            <param name="bytesFreed">Number of bytes freed</param>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.RecordLogEntriesProcessed(System.Int32)">
            <summary>
            Records the number of log entries processed
            </summary>
            <param name="count">Number of log entries processed</param>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.RecordBatchProcessing(System.Int32,System.TimeSpan)">
            <summary>
            Records batch processing statistics
            </summary>
            <param name="batchSize">Size of the batch processed</param>
            <param name="processingTime">Time taken to process the batch</param>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.GetStatistics">
            <summary>
            Gets the current performance statistics
            </summary>
            <returns>A snapshot of current performance statistics</returns>
        </member>
        <member name="M:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.Reset">
            <summary>
            Resets all performance statistics to zero
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.OperationMetrics">
            <summary>
            Internal class for storing operation metrics
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.OperationMetrics.Count">
            <summary>
            Number of operations recorded
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.OperationMetrics.TotalTimeTicks">
            <summary>
            Total time for all operations in ticks
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.OperationMetrics.MinTimeTicks">
            <summary>
            Minimum operation time in ticks
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.LoggingPerformanceMonitor.OperationMetrics.MaxTimeTicks">
            <summary>
            Maximum operation time in ticks
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.Performance.PooledLogEntry">
            <summary>
            Pooled log entry that automatically returns to pool when disposed
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.PooledLogEntry._pool">
            <summary>
            Reference to the pool that owns this entry
            </summary>
        </member>
        <member name="F:BallDragDrop.Services.Performance.PooledLogEntry._disposed">
            <summary>
            Flag indicating if this entry has been disposed
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.Timestamp">
            <summary>
            Gets or sets the timestamp when the log entry was created
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.Level">
            <summary>
            Gets or sets the log level of the entry
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.Category">
            <summary>
            Gets or sets the category of the log entry
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.Message">
            <summary>
            Gets or sets the log message
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.CorrelationId">
            <summary>
            Gets or sets the correlation ID for tracking related log entries
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.Properties">
            <summary>
            Gets or sets additional properties associated with the log entry
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.Exception">
            <summary>
            Gets or sets the exception associated with the log entry, if any
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.ThreadId">
            <summary>
            Gets or sets the thread ID where the log entry was created
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.MachineName">
            <summary>
            Gets or sets the machine name where the log entry was created
            </summary>
        </member>
        <member name="P:BallDragDrop.Services.Performance.PooledLogEntry.ApplicationVersion">
            <summary>
            Gets or sets the application version
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Performance.PooledLogEntry.#ctor(BallDragDrop.Services.Performance.LogEntryPool)">
            <summary>
            Initializes a new instance of the PooledLogEntry class
            </summary>
            <param name="pool">The pool that owns this entry</param>
        </member>
        <member name="M:BallDragDrop.Services.Performance.PooledLogEntry.Reset">
            <summary>
            Resets the log entry for reuse
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.Performance.PooledLogEntry.Dispose">
            <summary>
            Disposes the log entry and returns it to the pool
            </summary>
        </member>
        <member name="T:BallDragDrop.Services.SettingsManager">
            <summary>
            Manages application settings persistence
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.#ctor(BallDragDrop.Contracts.ILogService,System.String)">
            <summary>
            Initializes a new instance of the SettingsManager class
            </summary>
            <param name="logService">Logging service</param>
            <param name="settingsFileName">Optional settings file name</param>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.#ctor(BallDragDrop.Contracts.ILogService,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SettingsManager class with a custom file path (for testing)
            </summary>
            <param name="logService">Logging service</param>
            <param name="settingsFilePath">Full path to the settings file</param>
            <param name="useCustomPath">Flag to indicate custom path usage</param>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.LoadSettings">
            <summary>
            Loads settings from the settings file
            </summary>
            <returns>True if settings were loaded successfully, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.SaveSettings">
            <summary>
            Saves settings to the settings file
            </summary>
            <returns>True if settings were saved successfully, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.GetSetting``1(System.String,``0)">
            <summary>
            Gets a setting value
            </summary>
            <typeparam name="T">The type of the setting value</typeparam>
            <param name="key">The setting key</param>
            <param name="defaultValue">The default value to return if the setting doesn't exist</param>
            <returns>The setting value or the default value if the setting doesn't exist</returns>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.SetSetting``1(System.String,``0)">
            <summary>
            Sets a setting value
            </summary>
            <typeparam name="T">The type of the setting value</typeparam>
            <param name="key">The setting key</param>
            <param name="value">The setting value</param>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.HasSetting(System.String)">
            <summary>
            Checks if a setting exists
            </summary>
            <param name="key">The setting key</param>
            <returns>True if the setting exists, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.RemoveSetting(System.String)">
            <summary>
            Removes a setting
            </summary>
            <param name="key">The setting key</param>
            <returns>True if the setting was removed, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.ClearSettings">
            <summary>
            Clears all settings
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.GetKeys">
            <summary>
            Gets all setting keys
            </summary>
            <returns>An enumerable of setting keys</returns>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.ConvertJsonElement(System.Text.Json.JsonElement)">
            <summary>
            Converts a JsonElement to an appropriate .NET type
            </summary>
            <param name="element">The JsonElement to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:BallDragDrop.Services.SettingsManager.ConvertJsonElement(System.Text.Json.JsonElement,System.Type)">
            <summary>
            Converts a JsonElement to a specific type
            </summary>
            <param name="element">The JsonElement to convert</param>
            <param name="targetType">The target type</param>
            <returns>The converted value</returns>
        </member>
        <member name="T:BallDragDrop.Services.SimpleLogService">
            <summary>
            Simple implementation of ILogService for integration purposes
            This will be replaced by Log4NetService in later tasks
            </summary>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogTrace(System.String,System.Object[])">
            <summary>
            Logs a trace message with optional formatting parameters
            </summary>
            <param name="message">The message template to log</param>
            <param name="args">Optional formatting arguments for the message</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogDebug(System.String,System.Object[])">
            <summary>
            Logs a debug message with optional formatting parameters
            </summary>
            <param name="message">The message template to log</param>
            <param name="args">Optional formatting arguments for the message</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogInformation(System.String,System.Object[])">
            <summary>
            Logs an information message with optional formatting parameters
            </summary>
            <param name="message">The message template to log</param>
            <param name="args">Optional formatting arguments for the message</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogWarning(System.String,System.Object[])">
            <summary>
            Logs a warning message with optional formatting parameters
            </summary>
            <param name="message">The message template to log</param>
            <param name="args">Optional formatting arguments for the message</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogError(System.String,System.Object[])">
            <summary>
            Logs an error message with optional formatting parameters
            </summary>
            <param name="message">The message template to log</param>
            <param name="args">Optional formatting arguments for the message</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogError(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an error message with an associated exception and optional formatting parameters
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message template to log</param>
            <param name="args">Optional formatting arguments for the message</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogCritical(System.String,System.Object[])">
            <summary>
            Logs a critical message with optional formatting parameters
            </summary>
            <param name="message">The message template to log</param>
            <param name="args">Optional formatting arguments for the message</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogCritical(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a critical message with an associated exception and optional formatting parameters
            </summary>
            <param name="exception">The exception to log</param>
            <param name="message">The message template to log</param>
            <param name="args">Optional formatting arguments for the message</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogStructured(BallDragDrop.Contracts.LogLevel,System.String,System.Object[])">
            <summary>
            Logs a structured message at the specified log level with property values
            </summary>
            <param name="level">The log level for this message</param>
            <param name="messageTemplate">The message template with placeholders</param>
            <param name="propertyValues">Values to substitute into the message template</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogStructured(BallDragDrop.Contracts.LogLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a structured message at the specified log level with an associated exception and property values
            </summary>
            <param name="level">The log level for this message</param>
            <param name="exception">The exception to log</param>
            <param name="messageTemplate">The message template with placeholders</param>
            <param name="propertyValues">Values to substitute into the message template</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.BeginScope(System.String,System.Object[])">
            <summary>
            Creates a logging scope that tracks the duration of an operation
            </summary>
            <param name="scopeName">The name of the scope</param>
            <param name="parameters">Optional parameters associated with the scope</param>
            <returns>A disposable object that ends the scope when disposed</returns>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogMethodEntry(System.String,System.Object[])">
            <summary>
            Logs the entry into a method with optional parameters
            </summary>
            <param name="methodName">The name of the method being entered</param>
            <param name="parameters">Optional parameters passed to the method</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogMethodExit(System.String,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Logs the exit from a method with optional return value and duration
            </summary>
            <param name="methodName">The name of the method being exited</param>
            <param name="returnValue">Optional return value from the method</param>
            <param name="duration">Optional duration the method took to execute</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogPerformance(System.String,System.TimeSpan,System.Object[])">
            <summary>
            Logs performance information for an operation
            </summary>
            <param name="operationName">The name of the operation being measured</param>
            <param name="duration">The duration the operation took to complete</param>
            <param name="additionalData">Optional additional data to include in the performance log</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.SetCorrelationId(System.String)">
            <summary>
            Sets the correlation ID for tracking related log entries
            </summary>
            <param name="correlationId">The correlation ID to set, or null to generate a new one</param>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.GetCorrelationId">
            <summary>
            Gets the current correlation ID used for tracking related log entries
            </summary>
            <returns>The current correlation ID</returns>
        </member>
        <member name="M:BallDragDrop.Services.SimpleLogService.LogScope.Dispose">
            <summary>
            Disposes the instance
            </summary>
        </member>
        <member name="T:BallDragDrop.ViewModels.BallViewModel">
            <summary>
            View model for the ball, implementing INotifyPropertyChanged for UI binding and IBallStateObserver for state machine integration
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.MouseDownCommand">
            <summary>
            Command for handling mouse down events
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.MouseMoveCommand">
            <summary>
            Command for handling mouse move events
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.MouseUpCommand">
            <summary>
            Command for handling mouse up events
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.X">
            <summary>
            Gets or sets the X position of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.Y">
            <summary>
            Gets or sets the Y position of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.Radius">
            <summary>
            Gets or sets the radius of the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.BallImage">
            <summary>
            Gets or sets the image source for the ball
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.IsAnimated">
            <summary>
            Gets a value indicating whether the ball visual is animated
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.ContentType">
            <summary>
            Gets the type of visual content currently loaded
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.AssetName">
            <summary>
            Gets the name of the currently loaded asset
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.IsDragging">
            <summary>
            Gets or sets whether the ball is currently being dragged
            This property reflects the Held state from the state machine
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.CurrentCursor">
            <summary>
            Gets or sets the cursor to display
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.Left">
            <summary>
            Gets the left position for binding (X - Radius)
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.Top">
            <summary>
            Gets the top position for binding (Y - Radius)
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.Width">
            <summary>
            Gets the width for binding (Diameter)
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.Height">
            <summary>
            Gets the height for binding (Diameter)
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.ShowBoundingBox">
            <summary>
            Gets or sets whether to show the bounding box for debugging
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.CurrentState">
            <summary>
            Gets the current state of the ball from the state machine
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.IsInIdleState">
            <summary>
            Gets a value indicating whether the ball is in the Idle state
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.IsInHeldState">
            <summary>
            Gets a value indicating whether the ball is in the Held state
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.IsInThrownState">
            <summary>
            Gets a value indicating whether the ball is in the Thrown state
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.StateOpacity">
            <summary>
            Gets the visual opacity for the ball based on its current state
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.StateScale">
            <summary>
            Gets the visual scale factor for the ball based on its current state
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.StateGlowRadius">
            <summary>
            Gets the visual glow effect intensity for the ball based on its current state
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.StateGlowColor">
            <summary>
            Gets the visual glow color for the ball based on its current state
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.StateBorderThickness">
            <summary>
            Gets the visual border thickness for the ball based on its current state
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.BallViewModel.StateBorderColor">
            <summary>
            Gets the visual border color for the ball based on its current state
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.#ctor(BallDragDrop.Contracts.ILogService,BallDragDrop.Contracts.IBallStateMachine,BallDragDrop.Services.ImageService,BallDragDrop.Contracts.IConfigurationService)">
            <summary>
            Initializes a new instance of the BallViewModel class
            </summary>
            <param name="logService">Logging service for tracking user interactions</param>
            <param name="stateMachine">State machine for managing ball state transitions</param>
            <param name="imageService">Image service for loading and managing visual content</param>
            <param name="configurationService">Configuration service for accessing application settings</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.#ctor(System.Double,System.Double,System.Double,BallDragDrop.Contracts.IBallStateMachine,BallDragDrop.Services.ImageService)">
            <summary>
            Initializes a new instance of the BallViewModel class for testing
            </summary>
            <param name="x">Initial X position</param>
            <param name="y">Initial Y position</param>
            <param name="radius">Ball radius</param>
            <param name="stateMachine">State machine for managing ball state transitions</param>
            <param name="imageService">Optional image service for testing</param>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._ballModel">
            <summary>
            The underlying ball model (internal for MainWindow access)
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._logService">
            <summary>
            Logging service for tracking user interactions
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._imageService">
            <summary>
            Image service for loading and managing visual content
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._configurationService">
            <summary>
            Configuration service for accessing application settings
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._stateMachine">
            <summary>
            State machine for managing ball state transitions
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._ballImage">
            <summary>
            Image source for the ball
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._isAnimated">
            <summary>
            Flag indicating whether the ball visual is animated
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._contentType">
            <summary>
            Type of visual content currently loaded
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._assetName">
            <summary>
            Name of the currently loaded asset
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._animationTimer">
            <summary>
            Timer for updating animation frames (optimized for source frame rates)
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._isDualTimerOptimized">
            <summary>
            Flag to track if dual timer optimization is enabled
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._isDragging">
            <summary>
            Flag indicating whether the ball is currently being dragged
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._lastMousePosition">
            <summary>
            Last recorded mouse position
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._dragStartPosition">
            <summary>
            Position where dragging started
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._lastUpdateTime">
            <summary>
            Timestamp of the last update
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._currentCursor">
            <summary>
            Current cursor to display
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._showBoundingBox">
            <summary>
            Flag indicating whether to show the bounding box for debugging
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._mousePositionHistory">
            <summary>
            Array storing mouse position history for velocity calculation
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._mouseTimestampHistory">
            <summary>
            Array storing mouse timestamp history for velocity calculation
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._mouseHistoryCount">
            <summary>
            Number of valid entries in the mouse history arrays
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._mouseMoveThrottler">
            <summary>
            Event throttler for mouse move events
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._lastMouseMoveArgs">
            <summary>
            Last mouse move event arguments for throttled processing
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.BallViewModel._lastAnimationUpdate">
            <summary>
            Timestamp of the last animation frame update for coordination with physics
            </summary>
        </member>
        <member name="E:BallDragDrop.ViewModels.BallViewModel.PropertyChanged">
            <summary>
            Event that is raised when a property value changes
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.Initialize(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Initializes the ball position and properties
            </summary>
            <param name="initialX">Initial X position</param>
            <param name="initialY">Initial Y position</param>
            <param name="radius">Ball radius (if not provided, uses configuration default)</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.ResetBall(System.Double,System.Double)">
            <summary>
            Resets the ball to its initial state and position
            </summary>
            <param name="centerX">Center X position to reset to</param>
            <param name="centerY">Center Y position to reset to</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.LoadBallVisualAsync(System.String)">
            <summary>
            Loads ball visual content from the specified file path
            </summary>
            <param name="filePath">Path to the visual content file</param>
            <returns>True if loading was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.LoadDefaultBallImageAsync">
            <summary>
            Loads the default ball image from configuration
            </summary>
            <returns>True if loading was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.GetDefaultBallSizeFromConfiguration">
            <summary>
            Gets the default ball size from configuration
            </summary>
            <returns>The default ball size from configuration, or 25.0 as fallback</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.GetShowBoundingBoxFromConfiguration">
            <summary>
            Gets the show bounding box setting from configuration
            </summary>
            <returns>The show bounding box setting from configuration, or false as fallback</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.ToggleBoundingBox">
            <summary>
            Toggles the bounding box display and updates the configuration
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.ValidateAndUpdateConfiguration">
            <summary>
            Validates the current configuration settings and updates them if necessary
            </summary>
            <returns>True if configuration is valid or was successfully updated, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.SwitchBallVisualAsync(System.String)">
            <summary>
            Switches the ball visual content to a new file without restarting the application
            Handles transitions between static and animated content while maintaining drag functionality
            </summary>
            <param name="filePath">Path to the new visual content file</param>
            <returns>True if switching was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.SwitchVisualContentTypeAsync(System.String,System.Boolean)">
            <summary>
            Switches between different visual content types (static to animated or vice versa)
            while maintaining all ball functionality
            </summary>
            <param name="filePath">Path to the new visual content file</param>
            <param name="preserveAnimationState">Whether to preserve animation playback state during transition</param>
            <returns>True if switching was successful, false otherwise</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.GetTransitionType(BallDragDrop.Services.VisualContentType,BallDragDrop.Services.VisualContentType)">
            <summary>
            Gets a description of the transition type between two content types
            </summary>
            <param name="fromType">The previous content type</param>
            <param name="toType">The new content type</param>
            <returns>A string describing the transition</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.StartAnimation">
            <summary>
            Starts animation playback if the current content is animated
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.StopAnimation">
            <summary>
            Stops animation playback
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OnAnimationTimerTick(System.Object,System.EventArgs)">
            <summary>
            Handles animation timer tick events to update frames with optimized rendering
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OnOptimizedAnimationTimerTick(System.Object,System.EventArgs)">
            <summary>
            Optimized animation timer tick handler that respects source frame rates
            while ensuring physics updates are not impacted
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.EnsureAnimationContinuesDuringDrag">
            <summary>
            Ensures animation continues during drag operations by keeping the timer running
            This method is called during drag operations to maintain animation playback
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.CoordinateAnimationWithPhysics">
            <summary>
            Coordinates animation timing with physics updates by synchronizing frame updates
            This method should be called from the physics update loop to ensure smooth coordination
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OptimizeAnimationTiming">
            <summary>
            Optimizes animation timer to respect source frame rates while maintaining physics smoothness
            Separates animation frame updates from physics updates for better performance
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.EnsureAnimationDoesNotImpactDragResponsiveness">
            <summary>
            Ensures animation performance doesn't impact drag responsiveness
            Temporarily adjusts animation timing during drag operations
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OptimizeAnimationRendering">
            <summary>
            Optimizes animation rendering by pre-loading frames and setting up efficient rendering
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.GetAnimationTimingMetrics">
            <summary>
            Gets comprehensive animation timing metrics for performance monitoring
            </summary>
            <returns>Animation timing metrics including FPS, coordination status, and performance indicators</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OptimizeDualTimerSystem">
            <summary>
            Optimizes the dual timer system by separating physics and animation updates
            Physics runs at 60 FPS while animation respects source frame rates
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OnOptimizedDualTimerAnimationTick(System.Object,System.EventArgs)">
            <summary>
            Optimized animation timer tick handler for dual timer system
            Respects source frame rates while ensuring physics updates are not impacted
            </summary>
            <param name="sender">Timer sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.EnsureDualTimerDragResponsiveness">
            <summary>
            Ensures animation performance doesn't impact drag responsiveness in dual timer system
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.CoordinateDualTimerSystem">
            <summary>
            Coordinates animation timing with physics updates in the dual timer system
            Ensures smooth operation between 60 FPS physics and variable animation frame rates
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.EnsureAnimationVisualQuality">
            <summary>
            Ensures visual quality is maintained during animation playback
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OnMouseDown(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles mouse down events
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles mouse move events with throttling
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.ProcessMouseMove">
            <summary>
            Processes mouse move events at a throttled rate
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.StoreMousePosition(System.Windows.Point,System.DateTime)">
            <summary>
            Stores the current mouse position and timestamp in the history arrays
            </summary>
            <param name="position">Current mouse position</param>
            <param name="timestamp">Current timestamp</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OnMouseUp(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles mouse up events
            </summary>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.UpdateCursor">
            <summary>
            Updates the cursor based on the current state
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.ConstrainPosition(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constrains the ball position to the specified boundaries
            </summary>
            <param name="minX">Minimum X coordinate</param>
            <param name="minY">Minimum Y coordinate</param>
            <param name="maxX">Maximum X coordinate</param>
            <param name="maxY">Maximum Y coordinate</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.GetLogServiceFromApp">
            <summary>
            Gets the log service from the application instance
            </summary>
            <returns>The log service or null if not available</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">Name of the property that changed</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.ForcePositionUpdate">
            <summary>
            Forces PropertyChanged events for position properties even if values haven't changed
            This is needed when the physics engine updates the model directly
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.ExtractAssetNameFromPath(System.String)">
            <summary>
            Extracts the asset name from a file path
            </summary>
            <param name="filePath">The file path to extract the asset name from</param>
            <returns>The extracted asset name, or "No Asset" if extraction fails</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.OnStateChanged(BallDragDrop.Models.BallState,BallDragDrop.Models.BallState,BallDragDrop.Models.BallTrigger)">
            <summary>
            Handles state change notifications from the ball state machine.
            Updates UI properties and coordinates state-dependent behavior.
            </summary>
            <param name="previousState">The state the ball was in before the transition</param>
            <param name="newState">The state the ball transitioned to</param>
            <param name="trigger">The trigger that caused the state transition</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.BallViewModel.Dispose">
            <summary>
            Disposes of resources and unsubscribes from the state machine
            </summary>
        </member>
        <member name="T:BallDragDrop.ViewModels.RelayCommand`1">
            <summary>
            A simple implementation of ICommand for the view model
            </summary>
        </member>
        <member name="E:BallDragDrop.ViewModels.RelayCommand`1.CanExecuteChanged">
            <summary>
            Event that is raised when the ability to execute the command changes
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the RelayCommand class
            </summary>
            <param name="execute">The execution logic</param>
            <param name="canExecute">The execution status logic</param>
            <exception cref="T:System.ArgumentNullException">Thrown when execute is null</exception>
        </member>
        <member name="F:BallDragDrop.ViewModels.RelayCommand`1._execute">
            <summary>
            The execution logic delegate
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.RelayCommand`1._canExecute">
            <summary>
            The execution status logic delegate
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Determines whether this command can execute in its current state
            </summary>
            <param name="parameter">Data used by the command</param>
            <returns>True if this command can be executed; otherwise, false</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.RelayCommand`1.Execute(System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="parameter">Data used by the command</param>
        </member>
        <member name="T:BallDragDrop.ViewModels.MainWindowViewModel">
            <summary>
            Main window view model that aggregates all child view models
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.MainWindowViewModel._logService">
            <summary>
            Logging service for tracking operations
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.MainWindowViewModel._ballViewModel">
            <summary>
            Ball view model instance
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.MainWindowViewModel._statusBarViewModel">
            <summary>
            Status bar view model instance
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.MainWindowViewModel._disposed">
            <summary>
            Flag to track if the object has been disposed
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.MainWindowViewModel.BallViewModel">
            <summary>
            Gets the ball view model
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.MainWindowViewModel.StatusBarViewModel">
            <summary>
            Gets the status bar view model
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.MainWindowViewModel.#ctor(BallDragDrop.ViewModels.BallViewModel,BallDragDrop.ViewModels.StatusBarViewModel,BallDragDrop.Contracts.ILogService)">
            <summary>
            Initializes a new instance of the MainWindowViewModel class
            </summary>
            <param name="ballViewModel">Ball view model instance</param>
            <param name="statusBarViewModel">Status bar view model instance</param>
            <param name="logService">Logging service for tracking operations</param>
        </member>
        <member name="E:BallDragDrop.ViewModels.MainWindowViewModel.PropertyChanged">
            <summary>
            Event that is raised when a property value changes
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.MainWindowViewModel.OnBallViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles property changes from the BallViewModel and forwards them
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.MainWindowViewModel.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">Name of the property that changed</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.MainWindowViewModel.Dispose">
            <summary>
            Disposes the view model and cleans up resources
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.MainWindowViewModel.Dispose(System.Boolean)">
            <summary>
            Disposes the view model and cleans up resources
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:BallDragDrop.ViewModels.StatusBarViewModel">
            <summary>
            View model for the status bar, implementing INotifyPropertyChanged for UI binding
            and IBallStateObserver for ball state change notifications
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._logService">
            <summary>
            Logging service for tracking status bar operations
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._performanceMonitor">
            <summary>
            Performance monitor service for FPS data
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._stateMachine">
            <summary>
            Ball state machine for tracking ball state changes
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._ballViewModel">
            <summary>
            Ball view model for asset information
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._fpsCalculator">
            <summary>
            FPS calculator for 10-second rolling average
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._currentFps">
            <summary>
            Current frames per second value
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._averageFps">
            <summary>
            Average frames per second over the last 10 seconds
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._assetName">
            <summary>
            Name of the currently loaded asset
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._statusText">
            <summary>
            Status text field
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._status">
            <summary>
            Status field for displaying ball state information
            </summary>
        </member>
        <member name="F:BallDragDrop.ViewModels.StatusBarViewModel._disposed">
            <summary>
            Flag to track if the object has been disposed
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.StatusBarViewModel.CurrentFps">
            <summary>
            Gets or sets the current frames per second
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.StatusBarViewModel.AverageFps">
            <summary>
            Gets or sets the average frames per second over the last 10 seconds
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.StatusBarViewModel.CurrentFpsDisplay">
            <summary>
            Gets the formatted current FPS display string
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.StatusBarViewModel.AverageFpsDisplay">
            <summary>
            Gets the formatted average FPS display string
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.StatusBarViewModel.AssetName">
            <summary>
            Gets or sets the name of the currently loaded asset
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.StatusBarViewModel.StatusText">
            <summary>
            Gets or sets the status text
            </summary>
        </member>
        <member name="P:BallDragDrop.ViewModels.StatusBarViewModel.Status">
            <summary>
            Gets or sets the status field that displays ball state information
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.#ctor(BallDragDrop.Contracts.ILogService,BallDragDrop.Contracts.IBallStateMachine,BallDragDrop.Services.PerformanceMonitor)">
            <summary>
            Initializes a new instance of the StatusBarViewModel class
            </summary>
            <param name="logService">Logging service for tracking status bar operations</param>
            <param name="stateMachine">Ball state machine for tracking ball state changes</param>
            <param name="performanceMonitor">Performance monitor service for FPS data</param>
        </member>
        <member name="E:BallDragDrop.ViewModels.StatusBarViewModel.PropertyChanged">
            <summary>
            Event that is raised when a property value changes
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.OnFpsUpdated(System.Object,BallDragDrop.Services.FpsUpdatedEventArgs)">
            <summary>
            Handles FPS updates from the PerformanceMonitor
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data containing FPS information</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.OnBallViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles property changes from the BallViewModel
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data containing property change information</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.ConnectToBallViewModel(BallDragDrop.ViewModels.BallViewModel)">
            <summary>
            Connects the StatusBarViewModel to a BallViewModel for asset information
            </summary>
            <param name="ballViewModel">The BallViewModel to connect to</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.ProcessAssetName(System.String)">
            <summary>
            Processes the asset name with truncation and default handling
            </summary>
            <param name="rawAssetName">The raw asset name from BallViewModel</param>
            <returns>The processed asset name suitable for display</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.SanitizeFpsValue(System.Double)">
            <summary>
            Sanitizes FPS values to ensure they are valid for display
            </summary>
            <param name="fps">The FPS value to sanitize</param>
            <returns>A sanitized FPS value</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.FormatBallStateForDisplay(BallDragDrop.Models.BallState)">
            <summary>
            Formats the ball state for display in the status bar
            </summary>
            <param name="state">The ball state to format</param>
            <returns>A formatted string representation of the ball state</returns>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.OnStateChanged(BallDragDrop.Models.BallState,BallDragDrop.Models.BallState,BallDragDrop.Models.BallTrigger)">
            <summary>
            Handles ball state changes from the state machine
            </summary>
            <param name="previousState">The previous ball state</param>
            <param name="newState">The new ball state</param>
            <param name="trigger">The trigger that caused the state change</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="propertyName">Name of the property that changed</param>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.Dispose">
            <summary>
            Disposes the view model and cleans up resources
            </summary>
        </member>
        <member name="M:BallDragDrop.ViewModels.StatusBarViewModel.Dispose(System.Boolean)">
            <summary>
            Disposes the view model and cleans up resources
            </summary>
            <param name="disposing">True if disposing managed resources</param>
        </member>
        <member name="T:BallDragDrop.Views.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="E:BallDragDrop.Views.MainWindow.BallPositionChanged">
            <summary>
            Event that will be raised when the ball position changes due to window resize
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._logService">
            <summary>
            Logging service for the MainWindow
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._ballStateConfiguration">
            <summary>
            Ball state configuration for physics engine
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.#ctor">
            <summary>
            Initializes a new instance of the MainWindow class
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.InitializeDataContext">
            <summary>
            Initializes the DataContext with MainWindowViewModel
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.OnStateChanged(BallDragDrop.Models.BallState,BallDragDrop.Models.BallState,BallDragDrop.Models.BallTrigger)">
            <summary>
            Handles state change notifications from the ball state machine
            </summary>
            <param name="previousState">The previous state</param>
            <param name="newState">The new state</param>
            <param name="trigger">The trigger that caused the state change</param>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._physicsEngine">
            <summary>
            Physics engine for ball movement
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._lastPhysicsUpdate">
            <summary>
            Last time the physics was updated
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._isPhysicsRunning">
            <summary>
            Flag to track if physics simulation is running
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._performanceMonitor">
            <summary>
            Performance monitoring and optimization
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._physicsUpdateCounter">
            <summary>
            Debug counter for physics updates
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._physicsTimer">
            <summary>
            High-precision timer for physics updates (60 FPS)
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._physicsUpdateInterval">
            <summary>
            Target physics update interval (60 FPS = ~16.67ms)
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._useOptimizedTimers">
            <summary>
            Flag to track if we're using optimized dual timer system
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._mousePositionHistory">
            <summary>
            Array storing mouse position history for velocity calculation
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._mouseTimestampHistory">
            <summary>
            Array storing mouse timestamp history for velocity calculation
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._mouseHistoryCount">
            <summary>
            Number of valid entries in the mouse history arrays
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._lastMousePosition">
            <summary>
            Last recorded mouse position for drag operations
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow._lastMouseUpdateTime">
            <summary>
            Timestamp of the last mouse update
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.MainWindow_Closed(System.Object,System.EventArgs)">
            <summary>
            Event handler for window closed event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.Window_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for window loaded event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.Window_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Event handler for window resize events
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.BallImage_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Event handler for mouse down on the ball image
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.BallImage_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Event handler for mouse move on the ball image
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.BallImage_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Event handler for mouse up on the ball image
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.CompositionTarget_Rendering(System.Object,System.EventArgs)">
            <summary>
            Event handler for composition target rendering
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.FormatDoubleForDebug(System.Double)">
            <summary>
            Safely formats a double value for debug output, handling NaN, Infinity, and culture issues
            </summary>
            <param name="value">The double value to format</param>
            <returns>A safe string representation of the value</returns>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.InitializeOptimizedTimers">
            <summary>
            Initializes the optimized dual timer system
            Separates physics updates (60 FPS) from animation frame updates
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.CleanupOptimizedTimers">
            <summary>
            Cleans up the optimized timer system
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.StartPhysicsTimer">
            <summary>
            Starts the physics timer when physics simulation begins
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.StopPhysicsTimer">
            <summary>
            Stops the physics timer when physics simulation ends
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.PhysicsTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Dedicated physics timer tick handler for 60 FPS physics updates
            Separated from animation frame updates for optimal performance
            </summary>
            <param name="sender">Timer sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.SetOptimizedTimerMode(System.Boolean)">
            <summary>
            Enables or disables the optimized dual timer system
            </summary>
            <param name="useOptimized">True to use optimized timers, false for legacy approach</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.GetTimerPerformanceMetrics">
            <summary>
            Gets performance metrics for the dual timer system
            </summary>
            <returns>Performance metrics including physics FPS and animation coordination</returns>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.OptimizeDualTimerCoordination">
            <summary>
            Optimizes the dual timer system coordination
            Ensures physics updates (60 FPS) are separated from animation frame updates
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.GetDualTimerCoordinationMetrics">
            <summary>
            Gets comprehensive timing metrics for both physics and animation systems
            </summary>
            <returns>Combined timing metrics</returns>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.IsTimerCoordinationOptimal(BallDragDrop.Models.TimerPerformanceMetrics,BallDragDrop.Models.AnimationTimingMetrics)">
            <summary>
            Determines if timer coordination is optimal
            </summary>
            <param name="physicsMetrics">Physics timer metrics</param>
            <param name="animationMetrics">Animation timer metrics</param>
            <returns>True if coordination is optimal</returns>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.CalculateCoordinationEfficiency(BallDragDrop.Models.TimerPerformanceMetrics,BallDragDrop.Models.AnimationTimingMetrics)">
            <summary>
            Calculates the coordination efficiency between physics and animation timers
            </summary>
            <param name="physicsMetrics">Physics timer metrics</param>
            <param name="animationMetrics">Animation timer metrics</param>
            <returns>Coordination efficiency percentage</returns>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.ConstrainToWindowBoundaries(System.Double,System.Double,System.Double)">
            <summary>
            Ensures the ball stays within the window boundaries
            </summary>
            <param name="x">The x-coordinate to constrain</param>
            <param name="y">The y-coordinate to constrain</param>
            <param name="ballRadius">The radius of the ball (default is 0, treating the ball as a point)</param>
            <returns>A Point with coordinates constrained to the window boundaries</returns>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.SimulateResize(System.Double,System.Double)">
            <summary>
            Helper method for testing to simulate a window resize
            </summary>
            <param name="newWidth">The new width of the window</param>
            <param name="newHeight">The new height of the window</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.SwitchVisual_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for switching ball visual content
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.LoadStaticImage_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for loading static image content
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.LoadGifAnimation_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for loading GIF animation content
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.LoadAsepriteAnimation_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for loading Aseprite animation content
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.ToggleBoundingBox_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for toggling bounding box display
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.Reset_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for the Reset menu item
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.Quit_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for the Quit menu item
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.StoreMousePosition(System.Windows.Point,System.DateTime)">
            <summary>
            Stores the current mouse position and timestamp in the history arrays
            </summary>
            <param name="position">Current mouse position</param>
            <param name="timestamp">Current timestamp</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.CalculateVelocityFromHistory">
            <summary>
            Calculates velocity from the mouse position history
            </summary>
            <returns>Velocity as (X, Y) tuple</returns>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.UpdateBallPositionToMouse(BallDragDrop.ViewModels.BallViewModel,System.Windows.Point)">
            <summary>
            Updates the ball position to match the mouse position
            </summary>
            <param name="ballViewModel">The ball view model</param>
            <param name="mousePosition">The mouse position</param>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.UpdateCursorForPosition(BallDragDrop.ViewModels.BallViewModel,System.Windows.Point)">
            <summary>
            Updates the cursor based on the ball position and state
            </summary>
            <param name="ballViewModel">The ball view model</param>
            <param name="position">The current position</param>
        </member>
        <member name="F:BallDragDrop.Views.MainWindow.MainCanvas">
            <summary>
            MainCanvas Name Field
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BallDragDrop.Views.SplashScreen">
            <summary>
            Interaction logic for SplashScreen.xaml
            </summary>
            <summary>
            SplashScreen
            </summary>
        </member>
        <member name="E:BallDragDrop.Views.SplashScreen.InitializationComplete">
            <summary>
            Event that is raised when initialization is complete
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.SplashScreen.#ctor">
            <summary>
            Initializes a new instance of the SplashScreen class
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.SplashScreen._minimumDisplayTimer">
            <summary>
            Timer for minimum display time
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.SplashScreen._isInitializationComplete">
            <summary>
            Flag to track if initialization is complete
            </summary>
        </member>
        <member name="F:BallDragDrop.Views.SplashScreen._isMinimumTimeElapsed">
            <summary>
            Flag to track if minimum display time has elapsed
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.SplashScreen.Window_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for window loaded event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.SplashScreen.InitializeApplication">
            <summary>
            Initializes the application
            </summary>
            <returns>A task representing the asynchronous initialization operation</returns>
        </member>
        <member name="M:BallDragDrop.Views.SplashScreen.MinimumDisplayTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Event handler for minimum display timer tick
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:BallDragDrop.Views.SplashScreen.CheckIfReadyToClose">
            <summary>
            Checks if the splash screen is ready to close
            </summary>
        </member>
        <member name="M:BallDragDrop.Views.SplashScreen.UpdateStatus(System.String)">
            <summary>
            Updates the status text on the splash screen
            </summary>
            <param name="status">The new status text</param>
            <exception cref="T:System.ArgumentNullException">Thrown when status is null</exception>
        </member>
        <member name="M:BallDragDrop.Views.SplashScreen.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
